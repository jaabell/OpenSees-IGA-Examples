
# Validado, Martes 14 de Septiembre


import numpy as np
import opensees as ops
from math import *

# Geomgl utilities for visualization and surface manipulation
from geomdl import NURBS, compatibility, operations, knotvector, multi
from surfVisualize import *


def getCtrlPtsAndWeights(surf):
    # Flip control points to [u][v] (they are given by the getters in [v][u])
    noPtsX = surf.ctrlpts_size_u
    noPtsY = surf.ctrlpts_size_v
    weights = surf.weights
    controlPts = surf.ctrlpts2d[:]
    controlPts = compatibility.flip_ctrlpts2d(controlPts)
    controlPts = (np.array(controlPts).reshape(noPtsX * noPtsY, 4)).tolist()
    noCtrPts = len(controlPts)

    # Get separate array of control points in u,v and weights

    for i in range(len(controlPts)):
        pt = controlPts[i][:]
        wt = pt[-1]
        pt[0:3] = np.array(pt[0:3]) / wt
        controlPts[i] = pt[0:3]
        weights[i] = wt

    return controlPts, weights


def generateKnotVector(deg, nPts):

    import numpy as np
    knotVector = np.zeros(nPts + deg + 1)
    nMiddle = len(knotVector) - 2 * (deg + 1)
    step = 1.0 / (nMiddle + 1)

    ini = np.zeros(deg + 1)
    if step == 0.5:
        middle = np.array([step])
    else:
        middle = np.arange(0 + step, 1 - step, step)
        middle = np.linspace(0 + step, 1 - step, nPts +
                             deg + 1 - 2 * (deg + 1))
    fin = ini + 1

    knotVector = np.copy(ini)
    knotVector = np.append(knotVector, middle)
    knotVector = np.append(knotVector, fin)

    return knotVector


mm = 1.0 / 1000.  # m


ops.wipe()
ops.model('basic', '-ndm', 3, '-ndf', 3)


# These are given in v,u
controlPts = np.array([
    [4.953, 0., 0., 1.],
    [4.953, 0., 0.16172, 1.],
    [4.953, 0., 0.48516, 1.],
    [4.953, 0., 0.97031, 1.],
    [4.953, 0., 1.61719, 1.],
    [4.953, 0., 2.26406, 1.],
    [4.953, 0., 2.91094, 1.],
    [4.953, 0., 3.55781, 1.],
    [4.953, 0., 4.20469, 1.],
    [4.953, 0., 4.68984, 1.],
    [4.953, 0., 5.01328, 1.],
    [4.953, 0., 5.175, 1.],
    [4.953, 0.22298, 0., 0.98169],
    [4.953, 0.22298, 0.16172, 0.98169],
    [4.953, 0.22298, 0.48516, 0.98169],
    [4.953, 0.22298, 0.97031, 0.98169],
    [4.953, 0.22298, 1.61719, 0.98169],
    [4.953, 0.22298, 2.26406, 0.98169],
    [4.953, 0.22298, 2.91094, 0.98169],
    [4.953, 0.22298, 3.55781, 0.98169],
    [4.953, 0.22298, 4.20469, 0.98169],
    [4.953, 0.22298, 4.68984, 0.98169],
    [4.953, 0.22298, 5.01328, 0.98169],
    [4.953, 0.22298, 5.175, 0.98169],
    [4.92579, 0.68133, 0., 0.94813],
    [4.92579, 0.68133, 0.16172, 0.94813],
    [4.92579, 0.68133, 0.48516, 0.94813],
    [4.92579, 0.68133, 0.97031, 0.94813],
    [4.92579, 0.68133, 1.61719, 0.94813],
    [4.92579, 0.68133, 2.26406, 0.94813],
    [4.92579, 0.68133, 2.91094, 0.94813],
    [4.92579, 0.68133, 3.55781, 0.94813],
    [4.92579, 0.68133, 4.20469, 0.94813],
    [4.92579, 0.68133, 4.68984, 0.94813],
    [4.92579, 0.68133, 5.01328, 0.94813],
    [4.92579, 0.68133, 5.175, 0.94813],
    [4.79656, 1.38332, 0., 0.90695],
    [4.79656, 1.38332, 0.16172, 0.90695],
    [4.79656, 1.38332, 0.48516, 0.90695],
    [4.79656, 1.38332, 0.97031, 0.90695],
    [4.79656, 1.38332, 1.61719, 0.90695],
    [4.79656, 1.38332, 2.26406, 0.90695],
    [4.79656, 1.38332, 2.91094, 0.90695],
    [4.79656, 1.38332, 3.55781, 0.90695],
    [4.79656, 1.38332, 4.20469, 0.90695],
    [4.79656, 1.38332, 4.68984, 0.90695],
    [4.79656, 1.38332, 5.01328, 0.90695],
    [4.79656, 1.38332, 5.175, 0.90695],
    [4.4343, 2.3002, 0., 0.87033],
    [4.4343, 2.3002, 0.16172, 0.87033],
    [4.4343, 2.3002, 0.48516, 0.87033],
    [4.4343, 2.3002, 0.97031, 0.87033],
    [4.4343, 2.3002, 1.61719, 0.87033],
    [4.4343, 2.3002, 2.26406, 0.87033],
    [4.4343, 2.3002, 2.91094, 0.87033],
    [4.4343, 2.3002, 3.55781, 0.87033],
    [4.4343, 2.3002, 4.20469, 0.87033],
    [4.4343, 2.3002, 4.68984, 0.87033],
    [4.4343, 2.3002, 5.01328, 0.87033],
    [4.4343, 2.3002, 5.175, 0.87033],
    [3.87817, 3.15152, 0., 0.85203],
    [3.87817, 3.15152, 0.16172, 0.85203],
    [3.87817, 3.15152, 0.48516, 0.85203],
    [3.87817, 3.15152, 0.97031, 0.85203],
    [3.87817, 3.15152, 1.61719, 0.85203],
    [3.87817, 3.15152, 2.26406, 0.85203],
    [3.87817, 3.15152, 2.91094, 0.85203],
    [3.87817, 3.15152, 3.55781, 0.85203],
    [3.87817, 3.15152, 4.20469, 0.85203],
    [3.87817, 3.15152, 4.68984, 0.85203],
    [3.87817, 3.15152, 5.01328, 0.85203],
    [3.87817, 3.15152, 5.175, 0.85203],
    [3.15152, 3.87817, 0., 0.85203],
    [3.15152, 3.87817, 0.16172, 0.85203],
    [3.15152, 3.87817, 0.48516, 0.85203],
    [3.15152, 3.87817, 0.97031, 0.85203],
    [3.15152, 3.87817, 1.61719, 0.85203],
    [3.15152, 3.87817, 2.26406, 0.85203],
    [3.15152, 3.87817, 2.91094, 0.85203],
    [3.15152, 3.87817, 3.55781, 0.85203],
    [3.15152, 3.87817, 4.20469, 0.85203],
    [3.15152, 3.87817, 4.68984, 0.85203],
    [3.15152, 3.87817, 5.01328, 0.85203],
    [3.15152, 3.87817, 5.175, 0.85203],
    [2.3002, 4.4343, 0., 0.87033],
    [2.3002, 4.4343, 0.16172, 0.87033],
    [2.3002, 4.4343, 0.48516, 0.87033],
    [2.3002, 4.4343, 0.97031, 0.87033],
    [2.3002, 4.4343, 1.61719, 0.87033],
    [2.3002, 4.4343, 2.26406, 0.87033],
    [2.3002, 4.4343, 2.91094, 0.87033],
    [2.3002, 4.4343, 3.55781, 0.87033],
    [2.3002, 4.4343, 4.20469, 0.87033],
    [2.3002, 4.4343, 4.68984, 0.87033],
    [2.3002, 4.4343, 5.01328, 0.87033],
    [2.3002, 4.4343, 5.175, 0.87033],
    [1.38332, 4.79656, 0., 0.90695],
    [1.38332, 4.79656, 0.16172, 0.90695],
    [1.38332, 4.79656, 0.48516, 0.90695],
    [1.38332, 4.79656, 0.97031, 0.90695],
    [1.38332, 4.79656, 1.61719, 0.90695],
    [1.38332, 4.79656, 2.26406, 0.90695],
    [1.38332, 4.79656, 2.91094, 0.90695],
    [1.38332, 4.79656, 3.55781, 0.90695],
    [1.38332, 4.79656, 4.20469, 0.90695],
    [1.38332, 4.79656, 4.68984, 0.90695],
    [1.38332, 4.79656, 5.01328, 0.90695],
    [1.38332, 4.79656, 5.175, 0.90695],
    [0.68133, 4.92579, 0., 0.94813],
    [0.68133, 4.92579, 0.16172, 0.94813],
    [0.68133, 4.92579, 0.48516, 0.94813],
    [0.68133, 4.92579, 0.97031, 0.94813],
    [0.68133, 4.92579, 1.61719, 0.94813],
    [0.68133, 4.92579, 2.26406, 0.94813],
    [0.68133, 4.92579, 2.91094, 0.94813],
    [0.68133, 4.92579, 3.55781, 0.94813],
    [0.68133, 4.92579, 4.20469, 0.94813],
    [0.68133, 4.92579, 4.68984, 0.94813],
    [0.68133, 4.92579, 5.01328, 0.94813],
    [0.68133, 4.92579, 5.175, 0.94813],
    [0.22298, 4.953, 0., 0.98169],
    [0.22298, 4.953, 0.16172, 0.98169],
    [0.22298, 4.953, 0.48516, 0.98169],
    [0.22298, 4.953, 0.97031, 0.98169],
    [0.22298, 4.953, 1.61719, 0.98169],
    [0.22298, 4.953, 2.26406, 0.98169],
    [0.22298, 4.953, 2.91094, 0.98169],
    [0.22298, 4.953, 3.55781, 0.98169],
    [0.22298, 4.953, 4.20469, 0.98169],
    [0.22298, 4.953, 4.68984, 0.98169],
    [0.22298, 4.953, 5.01328, 0.98169],
    [0.22298, 4.953, 5.175, 0.98169],
    [0., 4.953, 0., 1.],
    [0., 4.953, 0.16172, 1.],
    [0., 4.953, 0.48516, 1.],
    [0., 4.953, 0.97031, 1.],
    [0., 4.953, 1.61719, 1.],
    [0., 4.953, 2.26406, 1.],
    [0., 4.953, 2.91094, 1.],
    [0., 4.953, 3.55781, 1.],
    [0., 4.953, 4.20469, 1.],
    [0., 4.953, 4.68984, 1.],
    [0., 4.953, 5.01328, 1.],
    [0., 4.953, 5.175, 1.]
])

# These are given in v,u , 21x21 mesh
controlPts = np.array([
[1.016               , 0.0                 , 0.0                  , 1.0]     ,
[1.016               , 0.0                 , 0.0381               , 1.0]     ,
[1.016               , 0.0                 , 0.1143               , 1.0]     ,
[1.016               , 0.0                 , 0.2286               , 1.0]     ,
[1.016               , 0.0                 , 0.381                , 1.0]     ,
[1.016               , 0.0                 , 0.5715               , 1.0]     ,
[1.016               , 0.0                 , 0.762                , 1.0]     ,
[1.016               , 0.0                 , 0.9525               , 1.0]     ,
[1.016               , 0.0                 , 1.143                , 1.0]     ,
[1.016               , 0.0                 , 1.3335               , 1.0]     ,
[1.016               , 0.0                 , 1.524                , 1.0]     ,
[1.016               , 0.0                 , 1.7145               , 1.0]     ,
[1.016               , 0.0                 , 1.905                , 1.0]     ,
[1.016               , 0.0                 , 2.0955               , 1.0]     ,
[1.016               , 0.0                 , 2.286                , 1.0]     ,
[1.016               , 0.0                 , 2.4765               , 1.0]     ,
[1.016               , 0.0                 , 2.667                , 1.0]     ,
[1.016               , 0.0                 , 2.8194               , 1.0]     ,
[1.016               , 0.0                 , 2.9337               , 1.0]     ,
[1.016               , 0.0                 , 3.0099               , 1.0]     ,
[1.016               , 0.0                 , 3.048                , 1.0]     ,
[1.00856288          , 0.0179575812        , 0.0                  , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.037821108          , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.113463324          , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.226926648          , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.37821108000000003  , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.56731662           , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.7564221600000001   , 0.99268] ,
[1.00856288          , 0.0179575812        , 0.9455277            , 0.99268] ,
[1.00856288          , 0.0179575812        , 1.13463324           , 0.99268] ,
[1.00856288          , 0.0179575812        , 1.32373878           , 0.99268] ,
[1.00856288          , 0.0179575812        , 1.5128443200000001   , 0.99268] ,
[1.00856288          , 0.0179575812        , 1.7019498599999998   , 0.99268] ,
[1.00856288          , 0.0179575812        , 1.8910554            , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.08016094           , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.26926648           , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.45837202           , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.64747756           , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.7987619919999998   , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.912225316          , 0.99268] ,
[1.00856288          , 0.0179575812        , 2.987867532          , 0.99268] ,
[1.00856288          , 0.0179575812        , 3.0256886400000003   , 0.99268] ,
[0.9933532631        , 0.0535527577        , 0.0                  , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.037280469000000004 , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.11184140699999999  , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.22368281399999998  , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.37280469           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.559207035          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.74560938           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 0.932011725          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 1.11841407           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 1.304816415          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 1.49121876           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 1.6776211049999998   , 0.97849] ,
[0.9933532631        , 0.0535527577        , 1.86402345           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.0504257949999998   , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.23682814           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.423230485          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.60963283           , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.758754706          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.870596113          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.945157051          , 0.97849] ,
[0.9933532631        , 0.0535527577        , 2.98243752           , 0.97849] ,
[0.969555741         , 0.10595184740000001 , 0.0                  , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.036521898000000004 , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.10956569399999999  , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.21913138799999998  , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.36521898           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.54782847           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.73043796           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 0.91304745           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 1.09565694           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 1.27826643           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 1.46087592           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 1.6434854099999998   , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 1.8260949            , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.00870439           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.19131388           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.37392337           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.55653286           , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.7026204519999997   , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.8121861459999997   , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.885229942          , 0.95858] ,
[0.969555741         , 0.10595184740000001 , 2.92175184           , 0.95858] ,
[0.9358556605999999  , 0.1738522442        , 0.0                  , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.035615499          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.106846497          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.213692994          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.35615499           , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.534232485          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.71230998           , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 0.890387475          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 1.06846497           , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 1.2465424649999999   , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 1.42461996           , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 1.602697455          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 1.78077495           , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 1.958852445          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.13692994           , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.315007435          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.4930849299999998   , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.635546926          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.742393423          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.813624421          , 0.93479] ,
[0.9358556605999999  , 0.1738522442        , 2.84923992           , 0.93479] ,
[0.8904263251        , 0.25543668020000004 , 0.0                  , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.034656141          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.103968423          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.207936846          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.34656141           , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.519842115          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.69312282           , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 0.8664035250000001   , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 1.03968423           , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 1.212964935          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 1.38624564           , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 1.5595263449999999   , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 1.7328070500000001   , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 1.906087755          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.07936846           , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.2526491650000002   , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.42592987           , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.564554434          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.668522857          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.737835139          , 0.90961] ,
[0.8904263251        , 0.25543668020000004 , 2.77249128           , 0.90961] ,
[0.8417330262        , 0.33372921780000003 , 0.0                  , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.033871662000000004 , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.101614986          , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.203229972          , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.33871662           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.50807493           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.67743324           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 0.8467915500000001   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 1.01614986           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 1.1855081699999999   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 1.35486648           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 1.5242247899999999   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 1.6935831000000001   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 1.86294141           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.03229972           , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.2016580300000004   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.3710163399999997   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.506502988          , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.6081179740000002   , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.675861298          , 0.88902] ,
[0.8417330262        , 0.33372921780000003 , 2.70973296           , 0.88902] ,
[0.78973326          , 0.4087386           , 0.0                  , 0.873]   ,
[0.78973326          , 0.4087386           , 0.0332613            , 0.873]   ,
[0.78973326          , 0.4087386           , 0.0997839            , 0.873]   ,
[0.78973326          , 0.4087386           , 0.1995678            , 0.873]   ,
[0.78973326          , 0.4087386           , 0.332613             , 0.873]   ,
[0.78973326          , 0.4087386           , 0.4989195            , 0.873]   ,
[0.78973326          , 0.4087386           , 0.665226             , 0.873]   ,
[0.78973326          , 0.4087386           , 0.8315325            , 0.873]   ,
[0.78973326          , 0.4087386           , 0.997839             , 0.873]   ,
[0.78973326          , 0.4087386           , 1.1641454999999998   , 0.873]   ,
[0.78973326          , 0.4087386           , 1.330452             , 0.873]   ,
[0.78973326          , 0.4087386           , 1.4967584999999999   , 0.873]   ,
[0.78973326          , 0.4087386           , 1.663065             , 0.873]   ,
[0.78973326          , 0.4087386           , 1.8293715            , 0.873]   ,
[0.78973326          , 0.4087386           , 1.995678             , 0.873]   ,
[0.78973326          , 0.4087386           , 2.1619845            , 0.873]   ,
[0.78973326          , 0.4087386           , 2.3282909999999997   , 0.873]   ,
[0.78973326          , 0.4087386           , 2.4613362            , 0.873]   ,
[0.78973326          , 0.4087386           , 2.5611201            , 0.873]   ,
[0.78973326          , 0.4087386           , 2.6276427            , 0.873]   ,
[0.78973326          , 0.4087386           , 2.660904             , 0.873]   ,
[0.7344540531999999  , 0.48045754960000003 , 0.0                  , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.032825436          , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.098476308          , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.196952616          , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.32825436           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.49238154           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.65650872           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.8206359            , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 0.98476308           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 1.14889026           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 1.31301744           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 1.47714462           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 1.6412718            , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 1.8053989799999999   , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 1.96952616           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 2.13365334           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 2.29778052           , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 2.429082264          , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 2.527558572          , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 2.593209444          , 0.86156] ,
[0.7344540531999999  , 0.48045754960000003 , 2.62603488           , 0.86156] ,
[0.675888213         , 0.54888834          , 0.0                  , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.03256407           , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.09769221           , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.19538442           , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.3256407            , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.48846105           , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.6512814            , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.8141017500000001   , 0.8547]  ,
[0.675888213         , 0.54888834          , 0.9769221            , 0.8547]  ,
[0.675888213         , 0.54888834          , 1.13974245           , 0.8547]  ,
[0.675888213         , 0.54888834          , 1.3025628            , 0.8547]  ,
[0.675888213         , 0.54888834          , 1.4653831499999999   , 0.8547]  ,
[0.675888213         , 0.54888834          , 1.6282035000000001   , 0.8547]  ,
[0.675888213         , 0.54888834          , 1.79102385           , 0.8547]  ,
[0.675888213         , 0.54888834          , 1.9538442            , 0.8547]  ,
[0.675888213         , 0.54888834          , 2.1166645500000003   , 0.8547]  ,
[0.675888213         , 0.54888834          , 2.2794849            , 0.8547]  ,
[0.675888213         , 0.54888834          , 2.40974118           , 0.8547]  ,
[0.675888213         , 0.54888834          , 2.50743339           , 0.8547]  ,
[0.675888213         , 0.54888834          , 2.57256153           , 0.8547]  ,
[0.675888213         , 0.54888834          , 2.6051256            , 0.8547]  ,
[0.6140335435000001  , 0.6140335435000001  , 0.0                  , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.032476821          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.097430463          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.194860926          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.32476821           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.487152315          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.64953642           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.811920525          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 0.97430463           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 1.136688735          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 1.29907284           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 1.461456945          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 1.62384105           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 1.786225155          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 1.94860926           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 2.110993365          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 2.27337747           , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 2.403284754          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 2.5007152169999998   , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 2.565668859          , 0.85241] ,
[0.6140335435000001  , 0.6140335435000001  , 2.59814568           , 0.85241] ,
[0.54888834          , 0.675888213         , 0.0                  , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.03256407           , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.09769221           , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.19538442           , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.3256407            , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.48846105           , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.6512814            , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.8141017500000001   , 0.8547]  ,
[0.54888834          , 0.675888213         , 0.9769221            , 0.8547]  ,
[0.54888834          , 0.675888213         , 1.13974245           , 0.8547]  ,
[0.54888834          , 0.675888213         , 1.3025628            , 0.8547]  ,
[0.54888834          , 0.675888213         , 1.4653831499999999   , 0.8547]  ,
[0.54888834          , 0.675888213         , 1.6282035000000001   , 0.8547]  ,
[0.54888834          , 0.675888213         , 1.79102385           , 0.8547]  ,
[0.54888834          , 0.675888213         , 1.9538442            , 0.8547]  ,
[0.54888834          , 0.675888213         , 2.1166645500000003   , 0.8547]  ,
[0.54888834          , 0.675888213         , 2.2794849            , 0.8547]  ,
[0.54888834          , 0.675888213         , 2.40974118           , 0.8547]  ,
[0.54888834          , 0.675888213         , 2.50743339           , 0.8547]  ,
[0.54888834          , 0.675888213         , 2.57256153           , 0.8547]  ,
[0.54888834          , 0.675888213         , 2.6051256            , 0.8547]  ,
[0.48045754960000003 , 0.7344540531999999  , 0.0                  , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.032825436          , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.098476308          , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.196952616          , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.32825436           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.49238154           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.65650872           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.8206359            , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 0.98476308           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 1.14889026           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 1.31301744           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 1.47714462           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 1.6412718            , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 1.8053989799999999   , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 1.96952616           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 2.13365334           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 2.29778052           , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 2.429082264          , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 2.527558572          , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 2.593209444          , 0.86156] ,
[0.48045754960000003 , 0.7344540531999999  , 2.62603488           , 0.86156] ,
[0.4087386           , 0.78973326          , 0.0                  , 0.873]   ,
[0.4087386           , 0.78973326          , 0.0332613            , 0.873]   ,
[0.4087386           , 0.78973326          , 0.0997839            , 0.873]   ,
[0.4087386           , 0.78973326          , 0.1995678            , 0.873]   ,
[0.4087386           , 0.78973326          , 0.332613             , 0.873]   ,
[0.4087386           , 0.78973326          , 0.4989195            , 0.873]   ,
[0.4087386           , 0.78973326          , 0.665226             , 0.873]   ,
[0.4087386           , 0.78973326          , 0.8315325            , 0.873]   ,
[0.4087386           , 0.78973326          , 0.997839             , 0.873]   ,
[0.4087386           , 0.78973326          , 1.1641454999999998   , 0.873]   ,
[0.4087386           , 0.78973326          , 1.330452             , 0.873]   ,
[0.4087386           , 0.78973326          , 1.4967584999999999   , 0.873]   ,
[0.4087386           , 0.78973326          , 1.663065             , 0.873]   ,
[0.4087386           , 0.78973326          , 1.8293715            , 0.873]   ,
[0.4087386           , 0.78973326          , 1.995678             , 0.873]   ,
[0.4087386           , 0.78973326          , 2.1619845            , 0.873]   ,
[0.4087386           , 0.78973326          , 2.3282909999999997   , 0.873]   ,
[0.4087386           , 0.78973326          , 2.4613362            , 0.873]   ,
[0.4087386           , 0.78973326          , 2.5611201            , 0.873]   ,
[0.4087386           , 0.78973326          , 2.6276427            , 0.873]   ,
[0.4087386           , 0.78973326          , 2.660904             , 0.873]   ,
[0.33372921780000003 , 0.8417330262        , 0.0                  , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.033871662000000004 , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.101614986          , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.203229972          , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.33871662           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.50807493           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.67743324           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 0.8467915500000001   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 1.01614986           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 1.1855081699999999   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 1.35486648           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 1.5242247899999999   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 1.6935831000000001   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 1.86294141           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.03229972           , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.2016580300000004   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.3710163399999997   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.506502988          , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.6081179740000002   , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.675861298          , 0.88902] ,
[0.33372921780000003 , 0.8417330262        , 2.70973296           , 0.88902] ,
[0.25543668020000004 , 0.8904263251        , 0.0                  , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.034656141          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.103968423          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.207936846          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.34656141           , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.519842115          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.69312282           , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 0.8664035250000001   , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 1.03968423           , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 1.212964935          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 1.38624564           , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 1.5595263449999999   , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 1.7328070500000001   , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 1.906087755          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.07936846           , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.2526491650000002   , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.42592987           , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.564554434          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.668522857          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.737835139          , 0.90961] ,
[0.25543668020000004 , 0.8904263251        , 2.77249128           , 0.90961] ,
[0.1738522442        , 0.9358556605999999  , 0.0                  , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.035615499          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.106846497          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.213692994          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.35615499           , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.534232485          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.71230998           , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 0.890387475          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 1.06846497           , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 1.2465424649999999   , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 1.42461996           , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 1.602697455          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 1.78077495           , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 1.958852445          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.13692994           , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.315007435          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.4930849299999998   , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.635546926          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.742393423          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.813624421          , 0.93479] ,
[0.1738522442        , 0.9358556605999999  , 2.84923992           , 0.93479] ,
[0.10595184740000001 , 0.969555741         , 0.0                  , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.036521898000000004 , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.10956569399999999  , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.21913138799999998  , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.36521898           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.54782847           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.73043796           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 0.91304745           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 1.09565694           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 1.27826643           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 1.46087592           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 1.6434854099999998   , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 1.8260949            , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.00870439           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.19131388           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.37392337           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.55653286           , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.7026204519999997   , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.8121861459999997   , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.885229942          , 0.95858] ,
[0.10595184740000001 , 0.969555741         , 2.92175184           , 0.95858] ,
[0.0535527577        , 0.9933532631        , 0.0                  , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.037280469000000004 , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.11184140699999999  , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.22368281399999998  , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.37280469           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.559207035          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.74560938           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 0.932011725          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 1.11841407           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 1.304816415          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 1.49121876           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 1.6776211049999998   , 0.97849] ,
[0.0535527577        , 0.9933532631        , 1.86402345           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.0504257949999998   , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.23682814           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.423230485          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.60963283           , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.758754706          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.870596113          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.945157051          , 0.97849] ,
[0.0535527577        , 0.9933532631        , 2.98243752           , 0.97849] ,
[0.0179575812        , 1.00856288          , 0.0                  , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.037821108          , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.113463324          , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.226926648          , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.37821108000000003  , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.56731662           , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.7564221600000001   , 0.99268] ,
[0.0179575812        , 1.00856288          , 0.9455277            , 0.99268] ,
[0.0179575812        , 1.00856288          , 1.13463324           , 0.99268] ,
[0.0179575812        , 1.00856288          , 1.32373878           , 0.99268] ,
[0.0179575812        , 1.00856288          , 1.5128443200000001   , 0.99268] ,
[0.0179575812        , 1.00856288          , 1.7019498599999998   , 0.99268] ,
[0.0179575812        , 1.00856288          , 1.8910554            , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.08016094           , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.26926648           , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.45837202           , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.64747756           , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.7987619919999998   , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.912225316          , 0.99268] ,
[0.0179575812        , 1.00856288          , 2.987867532          , 0.99268] ,
[0.0179575812        , 1.00856288          , 3.0256886400000003   , 0.99268] ,
[0.0                 , 1.016               , 0.0                  , 1.0]     ,
[0.0                 , 1.016               , 0.0381               , 1.0]     ,
[0.0                 , 1.016               , 0.1143               , 1.0]     ,
[0.0                 , 1.016               , 0.2286               , 1.0]     ,
[0.0                 , 1.016               , 0.381                , 1.0]     ,
[0.0                 , 1.016               , 0.5715               , 1.0]     ,
[0.0                 , 1.016               , 0.762                , 1.0]     ,
[0.0                 , 1.016               , 0.9525               , 1.0]     ,
[0.0                 , 1.016               , 1.143                , 1.0]     ,
[0.0                 , 1.016               , 1.3335               , 1.0]     ,
[0.0                 , 1.016               , 1.524                , 1.0]     ,
[0.0                 , 1.016               , 1.7145               , 1.0]     ,
[0.0                 , 1.016               , 1.905                , 1.0]     ,
[0.0                 , 1.016               , 2.0955               , 1.0]     ,
[0.0                 , 1.016               , 2.286                , 1.0]     ,
[0.0                 , 1.016               , 2.4765               , 1.0]     ,
[0.0                 , 1.016               , 2.667                , 1.0]     ,
[0.0                 , 1.016               , 2.8194               , 1.0]     ,
[0.0                 , 1.016               , 2.9337               , 1.0]     ,
[0.0                 , 1.016               , 3.0099               , 1.0]     ,
[0.0                 , 1.016               , 3.048                , 1.0]
])

# for point in controlPts:  # weighting points (x*w,y*w,z*w,w)
#     point[0] *= point[3]
#     point[1] *= point[3]
#     point[2] *= point[3]

for point in controlPts:
    point[0]*=(4.953/1.016)
    point[1]*=(4.953/1.016)
    point[2]*=(5.175/3.048)

patchTag = 1
P = 5
Q = 5

# Create a BSpline surface instance
surf = NURBS.Surface()

# Set surface degrees
surf.degree_u = P
surf.degree_v = Q

# Setting control points for surface
surf.set_ctrlpts(controlPts.tolist(), 21, 21)

# Set knot vectors
surf.knotvector_u = knotvector.generate(surf.degree_u, surf.ctrlpts_size_u)
surf.knotvector_v = knotvector.generate(surf.degree_v, surf.ctrlpts_size_v)


# Visualize surface
surfVisualize(surf, hold=True)
# exit()


# nDMaterial ElasticIsotropic $nDtag_elastic $elasticidad_probeta
# $poisson_probeta
E1 = 1.05e7  # Young's modulus N/m^2
E2 = E1
nu = 0.3125  # Poisson's ratio
rho = 0.5e2  # kg/m^3
t = 0.094


tagNDmat1 = 1
ops.nDMaterial("ElasticIsotropic", tagNDmat1, E1, nu, rho)

tagNDmat2 = 2
ops.nDMaterial("ElasticIsotropic", tagNDmat2, E2, nu, rho)


# nDMaterial PlateFiber $nDtag_platefiber $nDtag_elastic
tagPlaneStress1 = 3
ops.nDMaterial("PlaneStress", tagPlaneStress1, tagNDmat1)

tagPlaneStress2 = 4
ops.nDMaterial("PlaneStress", tagPlaneStress2, tagNDmat2)

deg2rad = pi / 180

# matTags = [3, 4, 3, 4, 3]
# thickness = [10. * mm, 10. * mm, 10. * mm, 10. * mm, 10. * mm]
# θ = [0 * deg2rad, 45 * deg2rad, 90 * deg2rad, -45 * deg2rad, 0 * deg2rad]

matTags = [3]
thickness = [t]
θ = [0 * deg2rad]

gFact = [0.0, 0.0, 0.0]


Nlayers = len(θ)

controlPts = surf.ctrlpts2d[:]  # Given in v,u
controlPts = np.array(compatibility.flip_ctrlpts2d(
    controlPts))  # Flipping to u,v

for point in controlPts:
    for i in range(surf.ctrlpts_size_v):
        for k in range(3):
            point[i][k] /= point[i][3]

nodeStartTag=1

ops.IGA("SurfacePatch", patchTag, nodeStartTag, surf.degree_u, surf.degree_v, surf.ctrlpts_size_u, surf.ctrlpts_size_v,
        "-type", "KLShell",
        # "-nonLinearGeometry", 0,
        "-planeStressMatTags", *matTags,
        "-gFact", *gFact,
        "-theta", *θ,
        "-thickness", *thickness,
        "-uKnot", *surf.knotvector_u, "-vKnot", *surf.knotvector_v, "-controlPts", *controlPts.flatten())


nPoints = surf.ctrlpts_size_u * surf.ctrlpts_size_v
print("surf.ctrlpts_size_u: ", surf.ctrlpts_size_u)
print("surf.ctrlpts_size_v: ", surf.ctrlpts_size_v)

#  Dirichlet BCs (symmetry conditions)
#    z
#    |
#  (D)------- (C)
#    |      |
#    |    L |
#    |  R   |
#  (A)------- (B) --->x
#
#  AB: free
#  Symmetry conditions on BC,CD and AD
#

nPoints = surf.ctrlpts_size_u * surf.ctrlpts_size_v

nodesOnDC = np.arange(1, surf.ctrlpts_size_u + 1, 1)
nodesNextToDC = nodesOnDC + surf.ctrlpts_size_u

nodesOnCB = np.arange(1, nPoints, surf.ctrlpts_size_v)
nodesNextToCB = nodesOnCB + 1


nodesOnAD = np.arange(surf.ctrlpts_size_u, nPoints + 1, surf.ctrlpts_size_v)
nodesNextToAD = nodesOnAD - 1


pointC=int(nodesOnCB[-1])
pointB=1



for n in ops.getNodeTags():
    if n in nodesOnAD:
        ops.fix(n, 1, 0, 0)
    if n in nodesOnCB:
        ops.fix(n, 0, 1, 0)
    if n in nodesOnDC:
        ops.fix(n, 0, 0, 1)


for i in range(len(nodesOnAD)):
    ops.equalDOF(int(nodesOnAD[i]), int(nodesNextToAD[i]), 1, 2, 3)
    # ops.equalDOF(int(nodesNextToAD[i]), int(nodesOnAD[i]), 2, 3)
    # ops.equalDOF(int(nodesOnAD[i]), int(nodesNextToAD[i]), 2)

    ops.equalDOF(int(nodesOnCB[i]), int(nodesNextToCB[i]), 1, 2, 3)
    # ops.equalDOF(int(nodesOnCB[i]), int(nodesNextToCB[i]), 2)

    ops.equalDOF(int(nodesOnDC[i]), int(nodesNextToDC[i]), 1, 2, 3)
    # ops.equalDOF(int(nodesOnDC[i]), int(nodesNextToDC[i]), 3)


print("\n\n\nPRINTING DOMAIN-----------------------")
ops.printModel()
print("\n\n\nDONE PRINTING DOMAIN-----------------------")


# ------------------------------
# Start of analysis generation
# ------------------------------

# create TimeSeries
ops.timeSeries("Linear", 1)

# create a plain load pattern
ops.pattern("Plain", 1, 1)


print("Loading nodes")

Pz = 40000.0
forcedNode = surf.ctrlpts_size_u
ops.load(forcedNode, 0, Pz / 4.0, 0)


print("Finished loading nodes")


print("Starting analysis")

# Create test
# ops.test("NormDispIncr", 1.0e-5, 50, 1) # Apparently faster
ops.test("NormUnbalance", 1.0e-6, 50, 1)
# ops.test("EnergyIncr", 1.0e-4, 80, 1)

# create SOE
ops.system("UmfPack")

# create DOF number
ops.numberer("Plain")

# create constraint handler
ops.constraints("Plain")
# ops.constraints("Penalty",1,1)


# ops.algorithm("Linear")
# ops.algorithm("Newton")
# ops.algorithm("SecantNewton")
ops.algorithm("NewtonLineSearch", 'type', 'Bisection')
# ops.algorithm("NewtonLineSearch")
# ops.algorithm("ModifiedNewton")
# ops.algorithm("KrylovNewton")
# ops.algorithm("BFGS")
# ops.algorithm("Broyden")

# create integrator
# delta = 0.1/2 # was 0.1
# defMax = 2.638
# nSteps = abs(int(defMax / delta))
# ops.integrator("DisplacementControl", forcedNode, 2, delta)

nSteps = 40
ops.integrator("LoadControl", 1.0 / nSteps)
# nSteps = 1


# create analysis object
ops.analysis("Static")


# perform the analysis
import matplotlib.pyplot as plt
data = np.zeros((nSteps + 1, 4))

for j in range(nSteps):
    print("=================================")
    print(f"Load step {j}")
    print("=================================")
    result = ops.analyze(1)
    if result != 0:
        break
        exit(-1)
    else:
        # Adding deformation to controlPts
        controlPts = surf.ctrlpts2d[:]
        controlPts = compatibility.flip_ctrlpts2d(
            controlPts)  # Flipping to u,v

        fDef = 1
        i = 1
        for dim in controlPts:
            for point in dim:
                # Times the weight
                point[:3] += fDef * np.array(ops.nodeDisp(i)) * point[3]
                i += 1

        # Setting control points for surface
        controlPts = compatibility.flip_ctrlpts2d(controlPts)
        controlPts = (np.array(controlPts).reshape(
            nPoints, 4))
        surf.set_ctrlpts(controlPts.tolist(),
                         surf.ctrlpts_size_u, surf.ctrlpts_size_v)

        # Visualize surface
        surfVisualize(surf, hold=True)

        controlPts = surf.ctrlpts2d[:]
        controlPts = compatibility.flip_ctrlpts2d(
            controlPts)  # Flipping to u,v
        i = 1
        for dim in controlPts:
            for point in dim:
                point[:3] -= fDef * np.array(ops.nodeDisp(i)) * point[3]
                i += 1

        # Setting control points for surface
        controlPts = compatibility.flip_ctrlpts2d(controlPts)
        controlPts = (np.array(controlPts).reshape(
            nPoints, 4))
        surf.set_ctrlpts(controlPts.tolist(),
                         surf.ctrlpts_size_u, surf.ctrlpts_size_v)

        data[j + 1, 0] = abs(ops.nodeDisp(forcedNode, 2))
        data[j + 1, 1] = ops.getLoadFactor(1)
        data[j + 1, 2] = abs(ops.nodeDisp(pointB, 1))  # Point B
        data[j + 1, 3] = abs(ops.nodeDisp(pointC, 1))  # Point C
        # elasticSolution = (data[j + 1, 2] * (La**3)) / (3 * E1 * I)
        # print("ops.getLoadFactor(1)*Pz: ", ops.getLoadFactor(1) * Pz)
        # print("elasticSolution: ", elasticSolution)
        print("data[j+1,0]: ", data[j + 1, 0])
        print("data[j+1,1]: ", data[j + 1, 1])
        print("4*data[j+1,1]: ", 4 * data[j + 1, 1])

        # B=ops.printB('-ret')
        # print("B: ", B)

        print("\nNext load step\n")

# % refenrece solution from Sze et al, 2004
# % Popular benchmark problems for geometric nonlinear analysis of shells

P = Pz/1000 * np.array([0, 0.025 , 0.05  , 0.075 , 0.1   , 0.15  , 0.20  , 0.25  , 0.30  , 0.35  , 0.40  , 0.45  , 0.5   , 0.525 , 0.55  , 0.6   , 0.65  , 0.7   , 0.75  , 0.8   , 0.85  , 0.9   , 0.95  , 1])
wA =     np.array([0, 0.819      , 1.26  , 1.527 , 1.707 , 1.936 , 2.079 , 2.180 , 2.257 , 2.321 , 2.376 , 2.425 , 2.473 , 2.543 , 2.577 , 2.618 , 2.648 , 2.672 , 2.692 , 2.710 , 2.726 , 2.741 , 2.755 , 2.768])
uB =     np.array([0, 0.864      , 1.471 , 1.901 , 2.217 , 2.641 , 2.904 , 3.087 , 3.227 , 3.342 , 3.443 , 3.539 , 3.653 , 4.061 , 4.171 , 4.274 , 4.338 , 4.385 , 4.423 , 4.455 , 4.483 , 4.508 , 4.53  , 4.551])
uC =     np.array([0, 0.872      , 1.493 , 1.946 , 2.293 , 2.792 , 3.106 , 3.310 , 3.452 , 3.556 , 3.632 , 3.688 , 3.718 , 3.580 , 3.518 , 3.452 , 3.410 , 3.378 , 3.353 , 3.332 , 3.313 , 3.297 , 3.283 , 3.269])


plt.plot(data[:, 0], Pz /1000* data[:, 1], 'or', mfc='none')
plt.plot(data[:, 2], Pz /1000* data[:, 1], 'ob', mfc='none')
plt.plot(data[:, 3], Pz /1000* data[:, 1], 'og', mfc='none')


plt.plot(wA, P, '-r')
plt.plot(uB, P, '-b')
plt.plot(uC, P, '-g')

plt.xlabel('Upward deflection at point A')
plt.ylabel('Pulling force at point A')
plt.show()


print("P = ",Pz /1000* data[:, 1])
print("wA = ",data[:, 0])
print("uB = ",data[:, 2])
print("uC = ",data[:, 3])

# Visualize surface
# surfVisualize(surf, hold=True)

# print("Done")

# elasticSolution = (Pz * (La**3)) / (3 * E1 * I)

# print("elasticSolution: ", elasticSolution)
# print("data[nSteps,0]: ", data[nSteps, 0])


# print("Finished analysis")

# Adding deformation to controlPts
controlPts = surf.ctrlpts2d[:]
controlPts = compatibility.flip_ctrlpts2d(controlPts)  # Flipping to u,v

fDefX = 1e0
fDefY = 1e0
fDefZ = 1e0
i = 1
for dim in controlPts:
    for point in dim:
        weight=point[3]

        point[0]/=weight
        point[1]/=weight
        point[2]/=weight

        point[0] = (ops.nodeCoord(i,1)+fDefX * ops.nodeDisp(i,1)) * weight  # Times the weight
        point[1] = (ops.nodeCoord(i,2)+fDefY * ops.nodeDisp(i,2)) * weight  # Times the weight
        point[2] = (ops.nodeCoord(i,3)+fDefZ * ops.nodeDisp(i,3)) * weight  # Times the weight

        i += 1

# Setting control points for surface
controlPts = compatibility.flip_ctrlpts2d(controlPts)
controlPts = (np.array(controlPts).reshape(
    nPoints, 4))
surf.set_ctrlpts(controlPts.tolist(), surf.ctrlpts_size_u, surf.ctrlpts_size_v)

# Symmetry
bbox = np.array(surf.bbox)
midPoint = (bbox[1] - bbox[0]) / 2


surfSym = operations.rotate(surf, 0, axis=1, inplace=False)
ctrlpts_surfSym = surfSym.ctrlpts2d[:]
for dim in ctrlpts_surfSym:
    for point in dim:
        point[2] *= -1  # Symmetry along x axis

ctrlpts_surfSym.reverse()  # Flipping
ctrlpts_surfSym = (np.array(ctrlpts_surfSym).reshape(surfSym.ctrlpts_size_u * surfSym.ctrlpts_size_v, 4))
surfSym.set_ctrlpts(ctrlpts_surfSym.tolist(), surfSym.ctrlpts_size_u, surfSym.ctrlpts_size_v)



surfSym_01=operations.translate(surf, [0,0,0*2*bbox[1][2]], inplace=False)
ctrlpts_surfSym_01 = surfSym_01.ctrlpts2d[:]
for dim in ctrlpts_surfSym_01:
    for point in dim:
        point[0] *= -1  # Symmetry along x axis

ctrlpts_surfSym_01.reverse()  # Flipping
ctrlpts_surfSym_01 = (np.array(ctrlpts_surfSym_01).reshape(surfSym_01.ctrlpts_size_u * surfSym_01.ctrlpts_size_v, 4))
surfSym_01.set_ctrlpts(ctrlpts_surfSym_01.tolist(), surfSym_01.ctrlpts_size_u, surfSym_01.ctrlpts_size_v)

surfSym_02=operations.translate(surfSym, [0,0,0*2*bbox[1][2]], inplace=False)
ctrlpts_surfSym_02 = surfSym_02.ctrlpts2d[:]
for dim in ctrlpts_surfSym_02:
    for point in dim:
        point[0] *= -1  # Symmetry along x axis

ctrlpts_surfSym_02.reverse()  # Flipping
ctrlpts_surfSym_02 = (np.array(ctrlpts_surfSym_02).reshape(surfSym_02.ctrlpts_size_u * surfSym_02.ctrlpts_size_v, 4))
surfSym_02.set_ctrlpts(ctrlpts_surfSym_02.tolist(), surfSym_02.ctrlpts_size_u, surfSym_02.ctrlpts_size_v)





# Symmetry along y axis
bbox = np.array(surf.bbox)
midPoint = (bbox[1] - bbox[0]) / 2
surf_down = operations.rotate(surf, 0, axis=1, inplace=False)
ctrlpts_surf_down = surf_down.ctrlpts2d[:]
for dim in ctrlpts_surf_down:
    for point in dim:
        point[1] *= -1  # Symmetry along x axis

ctrlpts_surf_down.reverse()  # Flipping
ctrlpts_surf_down = (np.array(ctrlpts_surf_down).reshape(surf_down.ctrlpts_size_u * surf_down.ctrlpts_size_v, 4))
surf_down.set_ctrlpts(ctrlpts_surf_down.tolist(), surf_down.ctrlpts_size_u, surf_down.ctrlpts_size_v)
bbox = np.array(surf_down.bbox)
midPoint = (bbox[1] - bbox[0]) / 2


surfSym_down = operations.rotate(surf_down, 0, axis=1, inplace=False)
ctrlpts_surfSym_down = surfSym_down.ctrlpts2d[:]
for dim in ctrlpts_surfSym_down:
    for point in dim:
        point[0] *= -1  # Symmetry along x axis

ctrlpts_surfSym_down.reverse()  # Flipping
ctrlpts_surfSym_down = (np.array(ctrlpts_surfSym_down).reshape(surfSym_down.ctrlpts_size_u * surfSym_down.ctrlpts_size_v, 4))
surfSym_down.set_ctrlpts(ctrlpts_surfSym_down.tolist(), surfSym_down.ctrlpts_size_u, surfSym_down.ctrlpts_size_v)



surfSym_01_down=operations.translate(surf_down, [0,0,0], inplace=False)
ctrlpts_surfSym_01_down = surfSym_01_down.ctrlpts2d[:]
for dim in ctrlpts_surfSym_01_down:
    for point in dim:
        point[2] *= -1  # Symmetry along x axis

ctrlpts_surfSym_01_down.reverse()  # Flipping
ctrlpts_surfSym_01_down = (np.array(ctrlpts_surfSym_01_down).reshape(surfSym_01_down.ctrlpts_size_u * surfSym_01_down.ctrlpts_size_v, 4))
surfSym_01_down.set_ctrlpts(ctrlpts_surfSym_01_down.tolist(), surfSym_01_down.ctrlpts_size_u, surfSym_01_down.ctrlpts_size_v)

surfSym_02_down=operations.translate(surfSym_down, [0,0,0], inplace=False)
ctrlpts_surfSym_02_down = surfSym_02_down.ctrlpts2d[:]
for dim in ctrlpts_surfSym_02_down:
    for point in dim:
        point[2] *= -1  # Symmetry along x axis

ctrlpts_surfSym_02_down.reverse()  # Flipping
ctrlpts_surfSym_02_down = (np.array(ctrlpts_surfSym_02_down).reshape(surfSym_02_down.ctrlpts_size_u * surfSym_02_down.ctrlpts_size_v, 4))
surfSym_02_down.set_ctrlpts(ctrlpts_surfSym_02_down.tolist(), surfSym_02_down.ctrlpts_size_u, surfSym_02_down.ctrlpts_size_v)




# Creating container for multipatches
surfList = [surf, surfSym, surfSym_01, surfSym_02, surf_down, surfSym_down, surfSym_01_down, surfSym_02_down]
# surfList = [surf, surfSym, surfSym_01, surfSym_02]




container = multi.SurfaceContainer(surfList)

# Visualize surface

container.sample_size = 30
for surf in container:
    surf.evaluate()

# Visualization configuration
container.vis = VisVTK.VisSurface(ctrlpts=False, legend=False, line_width=1, trim_size=20)
# container.vis.ctrlpts_offset=0.1

# Render the surface
evalcolor = ["red", "green", "green", "green", "green", "green", "green", "green"]
cpcolor=["red","black", "black", "black","black","black","black","black"]

# evalcolor = ["red", "green", "blue", "black"]
# cpcolor=["red","black", "black", "black"]
container.render(evalcolor=evalcolor, cpcolor=cpcolor)