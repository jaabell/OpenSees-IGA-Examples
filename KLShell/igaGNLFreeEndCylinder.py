#  IGA CANTILEVER PLATE. GEOMETRY OBTAINED FROM NGUYEN'S igaCicleBendingStrip2D

# Validado, Lunes 1 de Marzo


import numpy as np
import opensees as ops
from math import *

# Geomgl utilities for visualization and surface manipulation
from geomdl import NURBS, compatibility, operations, knotvector
from surfVisualize import *


def getCtrlPtsAndWeights(surf):
    # Flip control points to [u][v] (they are given by the getters in [v][u])
    noPtsX = surf.ctrlpts_size_u
    noPtsY = surf.ctrlpts_size_v
    weights = surf.weights
    controlPts = surf.ctrlpts2d[:]
    controlPts = compatibility.flip_ctrlpts2d(controlPts)
    controlPts = (np.array(controlPts).reshape(noPtsX * noPtsY, 4)).tolist()
    noCtrPts = len(controlPts)

    # Get separate array of control points in u,v and weights

    for i in range(len(controlPts)):
        pt = controlPts[i][:]
        wt = pt[-1]
        pt[0:3] = np.array(pt[0:3]) / wt
        controlPts[i] = pt[0:3]
        weights[i] = wt

    return controlPts, weights


def generateKnotVector(deg, nPts):

    import numpy as np
    knotVector = np.zeros(nPts + deg + 1)
    nMiddle = len(knotVector) - 2 * (deg + 1)
    step = 1.0 / (nMiddle + 1)

    ini = np.zeros(deg + 1)
    if step == 0.5:
        middle = np.array([step])
    else:
        middle = np.arange(0 + step, 1 - step, step)
        middle = np.linspace(0 + step, 1 - step, nPts +
                             deg + 1 - 2 * (deg + 1))
    fin = ini + 1

    knotVector = np.copy(ini)
    knotVector = np.append(knotVector, middle)
    knotVector = np.append(knotVector, fin)

    return knotVector


mm = 1.0 / 1000.  # m


ops.wipe()
ops.model('basic', '-ndm', 3, '-ndf', 3)



# Old control pts
    # [1.01600, 0.00000, 0.00000, 1.00000],
    # [1.01600, 0.04574, 0.00000, 0.98169],
    # [1.01042, 0.13976, 0.00000, 0.94813],
    # [0.98391, 0.28376, 0.00000, 0.90695],
    # [0.90960, 0.47184, 0.00000, 0.87033],
    # [0.79552, 0.64646, 0.00000, 0.85203],
    # [0.64646, 0.79552, 0.00000, 0.85203],
    # [0.47184, 0.90960, 0.00000, 0.87033],
    # [0.28376, 0.98391, 0.00000, 0.90695],
    # [0.13976, 1.01042, 0.00000, 0.94813],
    # [0.04574, 1.01600, 0.00000, 0.98169],
    # [0.00000, 1.01600, 0.00000, 1.00000],
    # [1.01600, 0.00000, 0.09525, 1.00000],
    # [1.01600, 0.04574, 0.09525, 0.98169],
    # [1.01042, 0.13976, 0.09525, 0.94813],
    # [0.98391, 0.28376, 0.09525, 0.90695],
    # [0.90960, 0.47184, 0.09525, 0.87033],
    # [0.79552, 0.64646, 0.09525, 0.85203],
    # [0.64646, 0.79552, 0.09525, 0.85203],
    # [0.47184, 0.90960, 0.09525, 0.87033],
    # [0.28376, 0.98391, 0.09525, 0.90695],
    # [0.13976, 1.01042, 0.09525, 0.94813],
    # [0.04574, 1.01600, 0.09525, 0.98169],
    # [0.00000, 1.01600, 0.09525, 1.00000],
    # [1.01600, 0.00000, 0.28575, 1.00000],
    # [1.01600, 0.04574, 0.28575, 0.98169],
    # [1.01042, 0.13976, 0.28575, 0.94813],
    # [0.98391, 0.28376, 0.28575, 0.90695],
    # [0.90960, 0.47184, 0.28575, 0.87033],
    # [0.79552, 0.64646, 0.28575, 0.85203],
    # [0.64646, 0.79552, 0.28575, 0.85203],
    # [0.47184, 0.90960, 0.28575, 0.87033],
    # [0.28376, 0.98391, 0.28575, 0.90695],
    # [0.13976, 1.01042, 0.28575, 0.94813],
    # [0.04574, 1.01600, 0.28575, 0.98169],
    # [0.00000, 1.01600, 0.28575, 1.00000],
    # [1.01600, 0.00000, 0.57150, 1.00000],
    # [1.01600, 0.04574, 0.57150, 0.98169],
    # [1.01042, 0.13976, 0.57150, 0.94813],
    # [0.98391, 0.28376, 0.57150, 0.90695],
    # [0.90960, 0.47184, 0.57150, 0.87033],
    # [0.79552, 0.64646, 0.57150, 0.85203],
    # [0.64646, 0.79552, 0.57150, 0.85203],
    # [0.47184, 0.90960, 0.57150, 0.87033],
    # [0.28376, 0.98391, 0.57150, 0.90695],
    # [0.13976, 1.01042, 0.57150, 0.94813],
    # [0.04574, 1.01600, 0.57150, 0.98169],
    # [0.00000, 1.01600, 0.57150, 1.00000],
    # [1.01600, 0.00000, 0.95250, 1.00000],
    # [1.01600, 0.04574, 0.95250, 0.98169],
    # [1.01042, 0.13976, 0.95250, 0.94813],
    # [0.98391, 0.28376, 0.95250, 0.90695],
    # [0.90960, 0.47184, 0.95250, 0.87033],
    # [0.79552, 0.64646, 0.95250, 0.85203],
    # [0.64646, 0.79552, 0.95250, 0.85203],
    # [0.47184, 0.90960, 0.95250, 0.87033],
    # [0.28376, 0.98391, 0.95250, 0.90695],
    # [0.13976, 1.01042, 0.95250, 0.94813],
    # [0.04574, 1.01600, 0.95250, 0.98169],
    # [0.00000, 1.01600, 0.95250, 1.00000],
    # [1.01600, 0.00000, 1.33350, 1.00000],
    # [1.01600, 0.04574, 1.33350, 0.98169],
    # [1.01042, 0.13976, 1.33350, 0.94813],
    # [0.98391, 0.28376, 1.33350, 0.90695],
    # [0.90960, 0.47184, 1.33350, 0.87033],
    # [0.79552, 0.64646, 1.33350, 0.85203],
    # [0.64646, 0.79552, 1.33350, 0.85203],
    # [0.47184, 0.90960, 1.33350, 0.87033],
    # [0.28376, 0.98391, 1.33350, 0.90695],
    # [0.13976, 1.01042, 1.33350, 0.94813],
    # [0.04574, 1.01600, 1.33350, 0.98169],
    # [0.00000, 1.01600, 1.33350, 1.00000],
    # [1.01600, 0.00000, 1.71450, 1.00000],
    # [1.01600, 0.04574, 1.71450, 0.98169],
    # [1.01042, 0.13976, 1.71450, 0.94813],
    # [0.98391, 0.28376, 1.71450, 0.90695],
    # [0.90960, 0.47184, 1.71450, 0.87033],
    # [0.79552, 0.64646, 1.71450, 0.85203],
    # [0.64646, 0.79552, 1.71450, 0.85203],
    # [0.47184, 0.90960, 1.71450, 0.87033],
    # [0.28376, 0.98391, 1.71450, 0.90695],
    # [0.13976, 1.01042, 1.71450, 0.94813],
    # [0.04574, 1.01600, 1.71450, 0.98169],
    # [0.00000, 1.01600, 1.71450, 1.00000],
    # [1.01600, 0.00000, 2.09550, 1.00000],
    # [1.01600, 0.04574, 2.09550, 0.98169],
    # [1.01042, 0.13976, 2.09550, 0.94813],
    # [0.98391, 0.28376, 2.09550, 0.90695],
    # [0.90960, 0.47184, 2.09550, 0.87033],
    # [0.79552, 0.64646, 2.09550, 0.85203],
    # [0.64646, 0.79552, 2.09550, 0.85203],
    # [0.47184, 0.90960, 2.09550, 0.87033],
    # [0.28376, 0.98391, 2.09550, 0.90695],
    # [0.13976, 1.01042, 2.09550, 0.94813],
    # [0.04574, 1.01600, 2.09550, 0.98169],
    # [0.00000, 1.01600, 2.09550, 1.00000],
    # [1.01600, 0.00000, 2.47650, 1.00000],
    # [1.01600, 0.04574, 2.47650, 0.98169],
    # [1.01042, 0.13976, 2.47650, 0.94813],
    # [0.98391, 0.28376, 2.47650, 0.90695],
    # [0.90960, 0.47184, 2.47650, 0.87033],
    # [0.79552, 0.64646, 2.47650, 0.85203],
    # [0.64646, 0.79552, 2.47650, 0.85203],
    # [0.47184, 0.90960, 2.47650, 0.87033],
    # [0.28376, 0.98391, 2.47650, 0.90695],
    # [0.13976, 1.01042, 2.47650, 0.94813],
    # [0.04574, 1.01600, 2.47650, 0.98169],
    # [0.00000, 1.01600, 2.47650, 1.00000],
    # [1.01600, 0.00000, 2.76225, 1.00000],
    # [1.01600, 0.04574, 2.76225, 0.98169],
    # [1.01042, 0.13976, 2.76225, 0.94813],
    # [0.98391, 0.28376, 2.76225, 0.90695],
    # [0.90960, 0.47184, 2.76225, 0.87033],
    # [0.79552, 0.64646, 2.76225, 0.85203],
    # [0.64646, 0.79552, 2.76225, 0.85203],
    # [0.47184, 0.90960, 2.76225, 0.87033],
    # [0.28376, 0.98391, 2.76225, 0.90695],
    # [0.13976, 1.01042, 2.76225, 0.94813],
    # [0.04574, 1.01600, 2.76225, 0.98169],
    # [0.00000, 1.01600, 2.76225, 1.00000],
    # [1.01600, 0.00000, 2.95275, 1.00000],
    # [1.01600, 0.04574, 2.95275, 0.98169],
    # [1.01042, 0.13976, 2.95275, 0.94813],
    # [0.98391, 0.28376, 2.95275, 0.90695],
    # [0.90960, 0.47184, 2.95275, 0.87033],
    # [0.79552, 0.64646, 2.95275, 0.85203],
    # [0.64646, 0.79552, 2.95275, 0.85203],
    # [0.47184, 0.90960, 2.95275, 0.87033],
    # [0.28376, 0.98391, 2.95275, 0.90695],
    # [0.13976, 1.01042, 2.95275, 0.94813],
    # [0.04574, 1.01600, 2.95275, 0.98169],
    # [0.00000, 1.01600, 2.95275, 1.00000],
    # [1.01600, 0.00000, 3.04800, 1.00000],
    # [1.01600, 0.04574, 3.04800, 0.98169],
    # [1.01042, 0.13976, 3.04800, 0.94813],
    # [0.98391, 0.28376, 3.04800, 0.90695],
    # [0.90960, 0.47184, 3.04800, 0.87033],
    # [0.79552, 0.64646, 3.04800, 0.85203],
    # [0.64646, 0.79552, 3.04800, 0.85203],
    # [0.47184, 0.90960, 3.04800, 0.87033],
    # [0.28376, 0.98391, 3.04800, 0.90695],
    # [0.13976, 1.01042, 3.04800, 0.94813],
    # [0.04574, 1.01600, 3.04800, 0.98169],
    # [0.00000, 1.01600, 3.04800, 1.00000]

# These are given in v,u 
controlPts = np.array([
[1.016              , 0.0                , 0.0                 , 1.0]     ,
[1.016              , 0.0                , 0.09525             , 1.0]     ,
[1.016              , 0.0                , 0.28575             , 1.0]     ,
[1.016              , 0.0                , 0.5715              , 1.0]     ,
[1.016              , 0.0                , 0.9525              , 1.0]     ,
[1.016              , 0.0                , 1.3335              , 1.0]     ,
[1.016              , 0.0                , 1.7145              , 1.0]     ,
[1.016              , 0.0                , 2.0955              , 1.0]     ,
[1.016              , 0.0                , 2.4765              , 1.0]     ,
[1.016              , 0.0                , 2.76225             , 1.0]     ,
[1.016              , 0.0                , 2.95275             , 1.0]     ,
[1.016              , 0.0                , 3.048               , 1.0]     ,
[0.99739704         , 0.0449025006       , 0.0                 , 0.98169] ,
[0.99739704         , 0.0449025006       , 0.09350597249999999 , 0.98169] ,
[0.99739704         , 0.0449025006       , 0.2805179175        , 0.98169] ,
[0.99739704         , 0.0449025006       , 0.561035835         , 0.98169] ,
[0.99739704         , 0.0449025006       , 0.935059725         , 0.98169] ,
[0.99739704         , 0.0449025006       , 1.3090836149999998  , 0.98169] ,
[0.99739704         , 0.0449025006       , 1.6831075049999997  , 0.98169] ,
[0.99739704         , 0.0449025006       , 2.057131395         , 0.98169] ,
[0.99739704         , 0.0449025006       , 2.431155285         , 0.98169] ,
[0.99739704         , 0.0449025006       , 2.7116732024999997  , 0.98169] ,
[0.99739704         , 0.0449025006       , 2.8986851474999997  , 0.98169] ,
[0.99739704         , 0.0449025006       , 2.9921911199999998  , 0.98169] ,
[0.9580095146000002 , 0.1325106488       , 0.0                 , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 0.09030938250000001 , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 0.2709281475        , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 0.541856295         , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 0.903093825         , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 1.264331355         , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 1.625568885         , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 1.986806415         , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 2.348043945         , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 2.6189720925        , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 2.7995908575        , 0.94813] ,
[0.9580095146000002 , 0.1325106488       , 2.8899002400000002  , 0.94813] ,
[0.8923571745       , 0.257356132        , 0.0                 , 0.90695] ,
[0.8923571745       , 0.257356132        , 0.0863869875        , 0.90695] ,
[0.8923571745       , 0.257356132        , 0.25916096250000004 , 0.90695] ,
[0.8923571745       , 0.257356132        , 0.5183219250000001  , 0.90695] ,
[0.8923571745       , 0.257356132        , 0.863869875         , 0.90695] ,
[0.8923571745       , 0.257356132        , 1.209417825         , 0.90695] ,
[0.8923571745       , 0.257356132        , 1.5549657749999999  , 0.90695] ,
[0.8923571745       , 0.257356132        , 1.900513725         , 0.90695] ,
[0.8923571745       , 0.257356132        , 2.2460616750000004  , 0.90695] ,
[0.8923571745       , 0.257356132        , 2.5052226375        , 0.90695] ,
[0.8923571745       , 0.257356132        , 2.6779966125        , 0.90695] ,
[0.8923571745       , 0.257356132        , 2.7643836           , 0.90695] ,
[0.791652168        , 0.4106565072       , 0.0                 , 0.87033] ,
[0.791652168        , 0.4106565072       , 0.08289893250000001 , 0.87033] ,
[0.791652168        , 0.4106565072       , 0.2486967975        , 0.87033] ,
[0.791652168        , 0.4106565072       , 0.497393595         , 0.87033] ,
[0.791652168        , 0.4106565072       , 0.8289893250000001  , 0.87033] ,
[0.791652168        , 0.4106565072       , 1.160585055         , 0.87033] ,
[0.791652168        , 0.4106565072       , 1.492180785         , 0.87033] ,
[0.791652168        , 0.4106565072       , 1.823776515         , 0.87033] ,
[0.791652168        , 0.4106565072       , 2.155372245         , 0.87033] ,
[0.791652168        , 0.4106565072       , 2.4040690425        , 0.87033] ,
[0.791652168        , 0.4106565072       , 2.5698669075000002  , 0.87033] ,
[0.791652168        , 0.4106565072       , 2.6527658400000003  , 0.87033] ,
[0.6778069056      , 0.5508033138       , 0.0                 , 0.85203] ,
[0.6778069056       , 0.5508033138       , 0.0811558575        , 0.85203] ,
[0.6778069056       , 0.5508033138       , 0.24346757249999998 , 0.85203] ,
[0.6778069056       , 0.5508033138       , 0.48693514499999996 , 0.85203] ,
[0.6778069056       , 0.5508033138       , 0.811558575         , 0.85203] ,
[0.6778069056       , 0.5508033138       , 1.1361820049999998  , 0.85203] ,
[0.6778069056       , 0.5508033138       , 1.460805435         , 0.85203] ,
[0.6778069056       , 0.5508033138       , 1.7854288649999999  , 0.85203] ,
[0.6778069056       , 0.5508033138       , 2.110052295         , 0.85203] ,
[0.6778069056       , 0.5508033138       , 2.3535198674999998  , 0.85203] ,
[0.6778069056       , 0.5508033138       , 2.5158315824999997  , 0.85203] ,
[0.6778069056       , 0.5508033138       , 2.59698744          , 0.85203] ,
[0.5508033138      , 0.6778069056       , 0.0                 , 0.85203] ,
[0.5508033138       , 0.6778069056       , 0.0811558575        , 0.85203] ,
[0.5508033138       , 0.6778069056       , 0.24346757249999998 , 0.85203] ,
[0.5508033138       , 0.6778069056       , 0.48693514499999996 , 0.85203] ,
[0.5508033138       , 0.6778069056       , 0.811558575         , 0.85203] ,
[0.5508033138       , 0.6778069056       , 1.1361820049999998  , 0.85203] ,
[0.5508033138       , 0.6778069056       , 1.460805435         , 0.85203] ,
[0.5508033138       , 0.6778069056       , 1.7854288649999999  , 0.85203] ,
[0.5508033138       , 0.6778069056       , 2.110052295         , 0.85203] ,
[0.5508033138       , 0.6778069056       , 2.3535198674999998  , 0.85203] ,
[0.5508033138       , 0.6778069056       , 2.5158315824999997  , 0.85203] ,
[0.5508033138       , 0.6778069056       , 2.59698744          , 0.85203] ,
[0.4106565072       , 0.791652168        , 0.0                 , 0.87033] ,
[0.4106565072       , 0.791652168        , 0.08289893250000001 , 0.87033] ,
[0.4106565072       , 0.791652168        , 0.2486967975        , 0.87033] ,
[0.4106565072       , 0.791652168        , 0.497393595         , 0.87033] ,
[0.4106565072       , 0.791652168        , 0.8289893250000001  , 0.87033] ,
[0.4106565072       , 0.791652168        , 1.160585055         , 0.87033] ,
[0.4106565072       , 0.791652168        , 1.492180785         , 0.87033] ,
[0.4106565072       , 0.791652168        , 1.823776515         , 0.87033] ,
[0.4106565072       , 0.791652168        , 2.155372245         , 0.87033] ,
[0.4106565072       , 0.791652168        , 2.4040690425        , 0.87033] ,
[0.4106565072       , 0.791652168        , 2.5698669075000002  , 0.87033] ,
[0.4106565072       , 0.791652168        , 2.6527658400000003  , 0.87033] ,
[0.257356132        , 0.8923571745       , 0.0                 , 0.90695] ,
[0.257356132        , 0.8923571745       , 0.0863869875        , 0.90695] ,
[0.257356132        , 0.8923571745       , 0.25916096250000004 , 0.90695] ,
[0.257356132        , 0.8923571745       , 0.5183219250000001  , 0.90695] ,
[0.257356132        , 0.8923571745       , 0.863869875         , 0.90695] ,
[0.257356132        , 0.8923571745       , 1.209417825         , 0.90695] ,
[0.257356132        , 0.8923571745       , 1.5549657749999999  , 0.90695] ,
[0.257356132        , 0.8923571745       , 1.900513725         , 0.90695] ,
[0.257356132        , 0.8923571745       , 2.2460616750000004  , 0.90695] ,
[0.257356132        , 0.8923571745       , 2.5052226375        , 0.90695] ,
[0.257356132        , 0.8923571745       , 2.6779966125        , 0.90695] ,
[0.257356132        , 0.8923571745       , 2.7643836           , 0.90695] ,
[0.1325106488       , 0.9580095146000002 , 0.0                 , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 0.09030938250000001 , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 0.2709281475        , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 0.541856295         , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 0.903093825         , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 1.264331355         , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 1.625568885         , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 1.986806415         , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 2.348043945         , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 2.6189720925        , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 2.7995908575        , 0.94813] ,
[0.1325106488       , 0.9580095146000002 , 2.8899002400000002  , 0.94813] ,
[0.0449025006       , 0.99739704         , 0.0                 , 0.98169] ,
[0.0449025006       , 0.99739704         , 0.09350597249999999 , 0.98169] ,
[0.0449025006       , 0.99739704         , 0.2805179175        , 0.98169] ,
[0.0449025006       , 0.99739704         , 0.561035835         , 0.98169] ,
[0.0449025006       , 0.99739704         , 0.935059725         , 0.98169] ,
[0.0449025006       , 0.99739704         , 1.3090836149999998  , 0.98169] ,
[0.0449025006       , 0.99739704         , 1.6831075049999997  , 0.98169] ,
[0.0449025006       , 0.99739704         , 2.057131395         , 0.98169] ,
[0.0449025006       , 0.99739704         , 2.431155285         , 0.98169] ,
[0.0449025006       , 0.99739704         , 2.7116732024999997  , 0.98169] ,
[0.0449025006       , 0.99739704         , 2.8986851474999997  , 0.98169] ,
[0.0449025006       , 0.99739704         , 2.9921911199999998  , 0.98169] ,
[0.0                , 1.016              , 0.0                 , 1.0]     ,
[0.0                , 1.016              , 0.09525             , 1.0]     ,
[0.0                , 1.016              , 0.28575             , 1.0]     ,
[0.0                , 1.016              , 0.5715              , 1.0]     ,
[0.0                , 1.016              , 0.9525              , 1.0]     ,
[0.0                , 1.016              , 1.3335              , 1.0]     ,
[0.0                , 1.016              , 1.7145              , 1.0]     ,
[0.0                , 1.016              , 2.0955              , 1.0]     ,
[0.0                , 1.016              , 2.4765              , 1.0]     ,
[0.0                , 1.016              , 2.76225             , 1.0]     ,
[0.0                , 1.016              , 2.95275             , 1.0]     ,
[0.0                , 1.016              , 3.048               , 1.0]     ,
])




patchTag = 1
P = 4
Q = 4

# Create a BSpline surface instance
surf = NURBS.Surface()

# Set surface degrees
surf.degree_u = P
surf.degree_v = Q

# Setting control points for surface
surf.set_ctrlpts(controlPts.tolist(), 12, 12)

# Set knot vectors
surf.knotvector_u = knotvector.generate(surf.degree_u, surf.ctrlpts_size_u)
surf.knotvector_v = knotvector.generate(surf.degree_v, surf.ctrlpts_size_v)


# Visualize surface
surfVisualize(surf, hold=True)

# nDMaterial ElasticIsotropic $nDtag_elastic $elasticidad_probeta
# $poisson_probeta
E1 = 2.0685e7  # Young's modulus N/m^2
E2 = E1
nu = 0.3  # Poisson's ratio
rho = 0.5e2  # kg/m^3


tagNDmat1 = 1
ops.nDMaterial("ElasticIsotropic", tagNDmat1, E1, nu, rho)

tagNDmat2 = 2
ops.nDMaterial("ElasticIsotropic", tagNDmat2, E2, nu, rho)


# nDMaterial PlateFiber $nDtag_platefiber $nDtag_elastic
tagPlaneStress1 = 3
ops.nDMaterial("PlaneStress", tagPlaneStress1, tagNDmat1)

tagPlaneStress2 = 4
ops.nDMaterial("PlaneStress", tagPlaneStress2, tagNDmat2)

deg2rad = pi / 180

# matTags = [3, 4, 3, 4, 3]
# thickness = [10. * mm, 10. * mm, 10. * mm, 10. * mm, 10. * mm]
# θ = [0 * deg2rad, 45 * deg2rad, 90 * deg2rad, -45 * deg2rad, 0 * deg2rad]

matTags = [3]
thickness = [3.0/100.0]
θ = [0 * deg2rad]

gFact = [0.0, 0.0, 0.0]


Nlayers = len(θ)

controlPts = surf.ctrlpts2d[:]  # Given in v,u
controlPts = np.array(compatibility.flip_ctrlpts2d(controlPts))  # Flipping to u,v

for point in controlPts:
    for i in range(20):
        for k in range(3):
            point[i][k] /= point[i][3]

# for point in controlPts: 
#   for i in range(3):
#         point[i] /= point[3]


ops.IGA("Patch", patchTag, surf.degree_u, surf.degree_v, surf.ctrlpts_size_u, surf.ctrlpts_size_v,
        "-type", "KLShell",
        # "-nonLinearGeometry", 0,
        "-planeStressMatTags", *matTags,
        "-gFact", *gFact,
        "-theta", *θ,
        "-thickness", *thickness,
        "-uKnot", *surf.knotvector_u, "-vKnot", *surf.knotvector_v, "-controlPts", *controlPts.flatten())


nPoints = surf.ctrlpts_size_u * surf.ctrlpts_size_v
print("surf.ctrlpts_size_u: ", surf.ctrlpts_size_u)
print("surf.ctrlpts_size_v: ", surf.ctrlpts_size_v)

# hingedNodes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
# nextToHingedNodes = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
# middleNodes=np.arange(144-11,144+1,1)
# nextToMiddleNodes=middleNodes - 12
# fixedNodes = np.arange(1, 144, 12)
# nextToFixedNodes = fixedNodes+1


fixedNodes = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
nextToFixedNodes = fixedNodes+12

hingedNodes = np.arange(1, 144, 12)
nextToHingedNodes = hingedNodes + 1
# nextToHingedNodes = []

middleNodes = np.arange(12,144+1,12)
nextToMiddleNodes = middleNodes - 1
# nextToMiddleNodes = []


for n in ops.getNodeTags():
  if n in fixedNodes or n in nextToFixedNodes:
    ops.fix(n, 1, 1, 1)
  elif n in middleNodes:
    ops.fix(n,1,0,0)
  elif n in hingedNodes:
    ops.fix(n,0,1,0)



for i in range(len(hingedNodes)):
  ops.equalDOF(int(hingedNodes[i]),int(nextToHingedNodes[i]),2)
  ops.equalDOF(int(middleNodes[i]),int(nextToMiddleNodes[i]),2)
# # equalDOFnodes_master = np.arange(2 * surf.ctrlpts_size_u + 1, nPoints, surf.ctrlpts_size_u)
# masterNodes = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
# retainedNodes = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24]

# for i in range(len(masterNodes)):
#     masterNode = masterNodes[i]
#     retainedNode = retainedNodes[i]
#     ops.equalDOF(int(masterNode), int(retainedNode), 1, 2, 3)


print("\n\n\nPRINTING DOMAIN-----------------------")
ops.printModel()
print("\n\n\nDONE PRINTING DOMAIN-----------------------")

# ------------------------------
# Start of analysis generation
# ------------------------------

# create TimeSeries
ops.timeSeries("Linear", 1)

# create a plain load pattern
ops.pattern("Plain", 1, 1)


print("Loading nodes")

Pz = 2000.0  
ops.load(144, 0, -Pz/2.0, 0)


print("Finished loading nodes")


print("Starting analysis")

# Create test
# ops.test("NormDispIncr", 1.0e-4, 60, 1)
ops.test("NormUnbalance", 1.0e-4, 60, 1)

# create SOE
ops.system("UmfPack")

# create DOF number
ops.numberer("Plain")

# create constraint handler
ops.constraints("Plain")
# ops.constraints("Penalty",1,1)


# ops.algorithm("Linear")
# ops.algorithm("Newton")
# ops.algorithm("SecantNewton")
ops.algorithm("NewtonLineSearch",'type','Bisection')
# ops.algorithm("ModifiedNewton")
# ops.algorithm("KrylovNewton")
# ops.algorithm("BFGS")
# ops.algorithm("Broyden")

# create integrator
delta = -0.05
defMax = 1.7
nSteps = abs(int(defMax / delta))
# ops.integrator("LoadControl", 1.0 / nSteps)
ops.integrator("DisplacementControl", nPoints, 2, delta)

# create analysis object
ops.analysis("Static")


# perform the analysis
import matplotlib.pyplot as plt
data = np.zeros((nSteps + 1, 2))

for j in range(nSteps):
    print("=================================")
    print(f"Load step {j}")
    print("=================================")
    result = ops.analyze(1)
    if result != 0:
        break
        exit(-1)
    else:
        # Adding deformation to controlPts
        controlPts = surf.ctrlpts2d[:]
        controlPts = compatibility.flip_ctrlpts2d(controlPts)  # Flipping to u,v

        fDef = 1
        i = 1
        for dim in controlPts:
            for point in dim:
                point[:3] += fDef * np.array(ops.nodeDisp(i)) * point[3] # Times the weight
                i += 1

        # Setting control points for surface
        controlPts = compatibility.flip_ctrlpts2d(controlPts)
        controlPts = (np.array(controlPts).reshape(
            nPoints, 4))
        surf.set_ctrlpts(controlPts.tolist(), surf.ctrlpts_size_u, surf.ctrlpts_size_v)

        # Visualize surface
        surfVisualize(surf, hold=True)

        controlPts = surf.ctrlpts2d[:]
        controlPts = compatibility.flip_ctrlpts2d(controlPts)  # Flipping to u,v
        i = 1
        for dim in controlPts:
            for point in dim:
                point[:3] -= fDef * np.array(ops.nodeDisp(i)) * point[3]
                i += 1

        # Setting control points for surface
        controlPts = compatibility.flip_ctrlpts2d(controlPts)
        controlPts = (np.array(controlPts).reshape(
            nPoints, 4))
        surf.set_ctrlpts(controlPts.tolist(), surf.ctrlpts_size_u, surf.ctrlpts_size_v)

        data[j + 1, 0] = abs(ops.nodeDisp(144, 2))
        data[j + 1, 1] = ops.getLoadFactor(1)
        # elasticSolution = (data[j + 1, 2] * (La**3)) / (3 * E1 * I)
        # print("ops.getLoadFactor(1)*Pz: ", ops.getLoadFactor(1) * Pz)
        # print("elasticSolution: ", elasticSolution)
        print("data[j+1,0]: ", data[j + 1, 0])
        print("data[j+1,1]: ", data[j + 1, 1])

        # B=ops.printB('-ret')
        # print("B: ", B)

        print("\nNext load step\n")

plt.plot(data[:, 0], data[:, 1], '-or')
plt.xlabel('Downward deflection at point A x100')
plt.ylabel('Load at point A x1000')
plt.show()

# Visualize surface
# surfVisualize(surf, hold=True)

# print("Done")

# elasticSolution = (Pz * (La**3)) / (3 * E1 * I)

# print("elasticSolution: ", elasticSolution)
# print("data[nSteps,0]: ", data[nSteps, 0])


# print("Finished analysis")
