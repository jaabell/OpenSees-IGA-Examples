#  IGA CANTILEVER PLATE. GEOMETRY OBTAINED FROM NGUYEN'S igaCicleBendingStrip2D

# Validado, Lunes 1 de Marzo


import numpy as np
import opensees as ops
from math import *

# Geomgl utilities for visualization and surface manipulation
from geomdl import NURBS, compatibility, operations, knotvector
from surfVisualize import *


def getCtrlPtsAndWeights(surf):
    # Flip control points to [u][v] (they are given by the getters in [v][u])
    noPtsX = surf.ctrlpts_size_u
    noPtsY = surf.ctrlpts_size_v
    weights = surf.weights
    controlPts = surf.ctrlpts2d[:]
    controlPts = compatibility.flip_ctrlpts2d(controlPts)
    controlPts = (np.array(controlPts).reshape(noPtsX * noPtsY, 4)).tolist()
    noCtrPts = len(controlPts)

    # Get separate array of control points in u,v and weights

    for i in range(len(controlPts)):
        pt = controlPts[i][:]
        wt = pt[-1]
        pt[0:3] = np.array(pt[0:3]) / wt
        controlPts[i] = pt[0:3]
        weights[i] = wt

    return controlPts, weights


def generateKnotVector(deg, nPts):

    import numpy as np
    knotVector = np.zeros(nPts + deg + 1)
    nMiddle = len(knotVector) - 2 * (deg + 1)
    step = 1.0 / (nMiddle + 1)

    ini = np.zeros(deg + 1)
    if step == 0.5:
        middle = np.array([step])
    else:
        middle = np.arange(0 + step, 1 - step, step)
        middle = np.linspace(0 + step, 1 - step, nPts +
                             deg + 1 - 2 * (deg + 1))
    fin = ini + 1

    knotVector = np.copy(ini)
    knotVector = np.append(knotVector, middle)
    knotVector = np.append(knotVector, fin)

    return knotVector


mm = 1.0 / 1000.  # m


ops.wipe()
ops.model('basic', '-ndm', 3, '-ndf', 3)


# These are given in v,u
controlPts = np.array([
    [1.016, 0.0, 0.0, 1.0],
    [1.016, 0.0, 0.09525, 1.0],
    [1.016, 0.0, 0.28575, 1.0],
    [1.016, 0.0, 0.5715, 1.0],
    [1.016, 0.0, 0.9525, 1.0],
    [1.016, 0.0, 1.3335, 1.0],
    [1.016, 0.0, 1.7145, 1.0],
    [1.016, 0.0, 2.0955, 1.0],
    [1.016, 0.0, 2.4765, 1.0],
    [1.016, 0.0, 2.76225, 1.0],
    [1.016, 0.0, 2.95275, 1.0],
    [1.016, 0.0, 3.048, 1.0],
    [0.99739704, 0.0449025006, 0.0, 0.98169],
    [0.99739704, 0.0449025006, 0.09350597249999999, 0.98169],
    [0.99739704, 0.0449025006, 0.2805179175, 0.98169],
    [0.99739704, 0.0449025006, 0.561035835, 0.98169],
    [0.99739704, 0.0449025006, 0.935059725, 0.98169],
    [0.99739704, 0.0449025006, 1.3090836149999998, 0.98169],
    [0.99739704, 0.0449025006, 1.6831075049999997, 0.98169],
    [0.99739704, 0.0449025006, 2.057131395, 0.98169],
    [0.99739704, 0.0449025006, 2.431155285, 0.98169],
    [0.99739704, 0.0449025006, 2.7116732024999997, 0.98169],
    [0.99739704, 0.0449025006, 2.8986851474999997, 0.98169],
    [0.99739704, 0.0449025006, 2.9921911199999998, 0.98169],
    [0.9580095146000002, 0.1325106488, 0.0, 0.94813],
    [0.9580095146000002, 0.1325106488, 0.09030938250000001, 0.94813],
    [0.9580095146000002, 0.1325106488, 0.2709281475, 0.94813],
    [0.9580095146000002, 0.1325106488, 0.541856295, 0.94813],
    [0.9580095146000002, 0.1325106488, 0.903093825, 0.94813],
    [0.9580095146000002, 0.1325106488, 1.264331355, 0.94813],
    [0.9580095146000002, 0.1325106488, 1.625568885, 0.94813],
    [0.9580095146000002, 0.1325106488, 1.986806415, 0.94813],
    [0.9580095146000002, 0.1325106488, 2.348043945, 0.94813],
    [0.9580095146000002, 0.1325106488, 2.6189720925, 0.94813],
    [0.9580095146000002, 0.1325106488, 2.7995908575, 0.94813],
    [0.9580095146000002, 0.1325106488, 2.8899002400000002, 0.94813],
    [0.8923571745, 0.257356132, 0.0, 0.90695],
    [0.8923571745, 0.257356132, 0.0863869875, 0.90695],
    [0.8923571745, 0.257356132, 0.25916096250000004, 0.90695],
    [0.8923571745, 0.257356132, 0.5183219250000001, 0.90695],
    [0.8923571745, 0.257356132, 0.863869875, 0.90695],
    [0.8923571745, 0.257356132, 1.209417825, 0.90695],
    [0.8923571745, 0.257356132, 1.5549657749999999, 0.90695],
    [0.8923571745, 0.257356132, 1.900513725, 0.90695],
    [0.8923571745, 0.257356132, 2.2460616750000004, 0.90695],
    [0.8923571745, 0.257356132, 2.5052226375, 0.90695],
    [0.8923571745, 0.257356132, 2.6779966125, 0.90695],
    [0.8923571745, 0.257356132, 2.7643836, 0.90695],
    [0.791652168, 0.4106565072, 0.0, 0.87033],
    [0.791652168, 0.4106565072, 0.08289893250000001, 0.87033],
    [0.791652168, 0.4106565072, 0.2486967975, 0.87033],
    [0.791652168, 0.4106565072, 0.497393595, 0.87033],
    [0.791652168, 0.4106565072, 0.8289893250000001, 0.87033],
    [0.791652168, 0.4106565072, 1.160585055, 0.87033],
    [0.791652168, 0.4106565072, 1.492180785, 0.87033],
    [0.791652168, 0.4106565072, 1.823776515, 0.87033],
    [0.791652168, 0.4106565072, 2.155372245, 0.87033],
    [0.791652168, 0.4106565072, 2.4040690425, 0.87033],
    [0.791652168, 0.4106565072, 2.5698669075000002, 0.87033],
    [0.791652168, 0.4106565072, 2.6527658400000003, 0.87033],
    [0.6778069056, 0.5508033138, 0.0, 0.85203],
    [0.6778069056, 0.5508033138, 0.0811558575, 0.85203],
    [0.6778069056, 0.5508033138, 0.24346757249999998, 0.85203],
    [0.6778069056, 0.5508033138, 0.48693514499999996, 0.85203],
    [0.6778069056, 0.5508033138, 0.811558575, 0.85203],
    [0.6778069056, 0.5508033138, 1.1361820049999998, 0.85203],
    [0.6778069056, 0.5508033138, 1.460805435, 0.85203],
    [0.6778069056, 0.5508033138, 1.7854288649999999, 0.85203],
    [0.6778069056, 0.5508033138, 2.110052295, 0.85203],
    [0.6778069056, 0.5508033138, 2.3535198674999998, 0.85203],
    [0.6778069056, 0.5508033138, 2.5158315824999997, 0.85203],
    [0.6778069056, 0.5508033138, 2.59698744, 0.85203],
    [0.5508033138, 0.6778069056, 0.0, 0.85203],
    [0.5508033138, 0.6778069056, 0.0811558575, 0.85203],
    [0.5508033138, 0.6778069056, 0.24346757249999998, 0.85203],
    [0.5508033138, 0.6778069056, 0.48693514499999996, 0.85203],
    [0.5508033138, 0.6778069056, 0.811558575, 0.85203],
    [0.5508033138, 0.6778069056, 1.1361820049999998, 0.85203],
    [0.5508033138, 0.6778069056, 1.460805435, 0.85203],
    [0.5508033138, 0.6778069056, 1.7854288649999999, 0.85203],
    [0.5508033138, 0.6778069056, 2.110052295, 0.85203],
    [0.5508033138, 0.6778069056, 2.3535198674999998, 0.85203],
    [0.5508033138, 0.6778069056, 2.5158315824999997, 0.85203],
    [0.5508033138, 0.6778069056, 2.59698744, 0.85203],
    [0.4106565072, 0.791652168, 0.0, 0.87033],
    [0.4106565072, 0.791652168, 0.08289893250000001, 0.87033],
    [0.4106565072, 0.791652168, 0.2486967975, 0.87033],
    [0.4106565072, 0.791652168, 0.497393595, 0.87033],
    [0.4106565072, 0.791652168, 0.8289893250000001, 0.87033],
    [0.4106565072, 0.791652168, 1.160585055, 0.87033],
    [0.4106565072, 0.791652168, 1.492180785, 0.87033],
    [0.4106565072, 0.791652168, 1.823776515, 0.87033],
    [0.4106565072, 0.791652168, 2.155372245, 0.87033],
    [0.4106565072, 0.791652168, 2.4040690425, 0.87033],
    [0.4106565072, 0.791652168, 2.5698669075000002, 0.87033],
    [0.4106565072, 0.791652168, 2.6527658400000003, 0.87033],
    [0.257356132, 0.8923571745, 0.0, 0.90695],
    [0.257356132, 0.8923571745, 0.0863869875, 0.90695],
    [0.257356132, 0.8923571745, 0.25916096250000004, 0.90695],
    [0.257356132, 0.8923571745, 0.5183219250000001, 0.90695],
    [0.257356132, 0.8923571745, 0.863869875, 0.90695],
    [0.257356132, 0.8923571745, 1.209417825, 0.90695],
    [0.257356132, 0.8923571745, 1.5549657749999999, 0.90695],
    [0.257356132, 0.8923571745, 1.900513725, 0.90695],
    [0.257356132, 0.8923571745, 2.2460616750000004, 0.90695],
    [0.257356132, 0.8923571745, 2.5052226375, 0.90695],
    [0.257356132, 0.8923571745, 2.6779966125, 0.90695],
    [0.257356132, 0.8923571745, 2.7643836, 0.90695],
    [0.1325106488, 0.9580095146000002, 0.0, 0.94813],
    [0.1325106488, 0.9580095146000002, 0.09030938250000001, 0.94813],
    [0.1325106488, 0.9580095146000002, 0.2709281475, 0.94813],
    [0.1325106488, 0.9580095146000002, 0.541856295, 0.94813],
    [0.1325106488, 0.9580095146000002, 0.903093825, 0.94813],
    [0.1325106488, 0.9580095146000002, 1.264331355, 0.94813],
    [0.1325106488, 0.9580095146000002, 1.625568885, 0.94813],
    [0.1325106488, 0.9580095146000002, 1.986806415, 0.94813],
    [0.1325106488, 0.9580095146000002, 2.348043945, 0.94813],
    [0.1325106488, 0.9580095146000002, 2.6189720925, 0.94813],
    [0.1325106488, 0.9580095146000002, 2.7995908575, 0.94813],
    [0.1325106488, 0.9580095146000002, 2.8899002400000002, 0.94813],
    [0.0449025006, 0.99739704, 0.0, 0.98169],
    [0.0449025006, 0.99739704, 0.09350597249999999, 0.98169],
    [0.0449025006, 0.99739704, 0.2805179175, 0.98169],
    [0.0449025006, 0.99739704, 0.561035835, 0.98169],
    [0.0449025006, 0.99739704, 0.935059725, 0.98169],
    [0.0449025006, 0.99739704, 1.3090836149999998, 0.98169],
    [0.0449025006, 0.99739704, 1.6831075049999997, 0.98169],
    [0.0449025006, 0.99739704, 2.057131395, 0.98169],
    [0.0449025006, 0.99739704, 2.431155285, 0.98169],
    [0.0449025006, 0.99739704, 2.7116732024999997, 0.98169],
    [0.0449025006, 0.99739704, 2.8986851474999997, 0.98169],
    [0.0449025006, 0.99739704, 2.9921911199999998, 0.98169],
    [0.0, 1.016, 0.0, 1.0],
    [0.0, 1.016, 0.09525, 1.0],
    [0.0, 1.016, 0.28575, 1.0],
    [0.0, 1.016, 0.5715, 1.0],
    [0.0, 1.016, 0.9525, 1.0],
    [0.0, 1.016, 1.3335, 1.0],
    [0.0, 1.016, 1.7145, 1.0],
    [0.0, 1.016, 2.0955, 1.0],
    [0.0, 1.016, 2.4765, 1.0],
    [0.0, 1.016, 2.76225, 1.0],
    [0.0, 1.016, 2.95275, 1.0],
    [0.0, 1.016, 3.048, 1.0],
])


# # These are given in v,u
# controlPts = np.array([
# [1.016   , 0.0     , 0.0     , 1.0     ] ,
# [1.016   , 0.0     , 0.04763 , 1.0     ] ,
# [1.016   , 0.0     , 0.14288 , 1.0     ] ,
# [1.016   , 0.0     , 0.28575 , 1.0     ] ,
# [1.016   , 0.0     , 0.47625 , 1.0     ] ,
# [1.016   , 0.0     , 0.66675 , 1.0     ] ,
# [1.016   , 0.0     , 0.85725 , 1.0     ] ,
# [1.016   , 0.0     , 1.04775 , 1.0     ] ,
# [1.016   , 0.0     , 1.23825 , 1.0     ] ,
# [1.016   , 0.0     , 1.42875 , 1.0     ] ,
# [1.016   , 0.0     , 1.61925 , 1.0     ] ,
# [1.016   , 0.0     , 1.80975 , 1.0     ] ,
# [1.016   , 0.0     , 2.00025 , 1.0     ] ,
# [1.016   , 0.0     , 2.19075 , 1.0     ] ,
# [1.016   , 0.0     , 2.38125 , 1.0     ] ,
# [1.016   , 0.0     , 2.57175 , 1.0     ] ,
# [1.016   , 0.0     , 2.76225 , 1.0     ] ,
# [1.016   , 0.0     , 2.90512 , 1.0     ] ,
# [1.016   , 0.0     , 3.00038 , 1.0     ] ,
# [1.016   , 0.0     , 3.048   , 1.0     ] ,
# [1.016   , 0.02266 , 0.0     , 0.99085 ] ,
# [1.016   , 0.02266 , 0.04763 , 0.99085 ] ,
# [1.016   , 0.02266 , 0.14288 , 0.99085 ] ,
# [1.016   , 0.02266 , 0.28575 , 0.99085 ] ,
# [1.016   , 0.02266 , 0.47625 , 0.99085 ] ,
# [1.016   , 0.02266 , 0.66675 , 0.99085 ] ,
# [1.016   , 0.02266 , 0.85725 , 0.99085 ] ,
# [1.016   , 0.02266 , 1.04775 , 0.99085 ] ,
# [1.016   , 0.02266 , 1.23825 , 0.99085 ] ,
# [1.016   , 0.02266 , 1.42875 , 0.99085 ] ,
# [1.016   , 0.02266 , 1.61925 , 0.99085 ] ,
# [1.016   , 0.02266 , 1.80975 , 0.99085 ] ,
# [1.016   , 0.02266 , 2.00025 , 0.99085 ] ,
# [1.016   , 0.02266 , 2.19075 , 0.99085 ] ,
# [1.016   , 0.02266 , 2.38125 , 0.99085 ] ,
# [1.016   , 0.02266 , 2.57175 , 0.99085 ] ,
# [1.016   , 0.02266 , 2.76225 , 0.99085 ] ,
# [1.016   , 0.02266 , 2.90512 , 0.99085 ] ,
# [1.016   , 0.02266 , 3.00038 , 0.99085 ] ,
# [1.016   , 0.02266 , 3.048   , 0.99085 ] ,
# [1.01464 , 0.06864 , 0.0     , 0.9733  ] ,
# [1.01464 , 0.06864 , 0.04763 , 0.9733  ] ,
# [1.01464 , 0.06864 , 0.14288 , 0.9733  ] ,
# [1.01464 , 0.06864 , 0.28575 , 0.9733  ] ,
# [1.01464 , 0.06864 , 0.47625 , 0.9733  ] ,
# [1.01464 , 0.06864 , 0.66675 , 0.9733  ] ,
# [1.01464 , 0.06864 , 0.85725 , 0.9733  ] ,
# [1.01464 , 0.06864 , 1.04775 , 0.9733  ] ,
# [1.01464 , 0.06864 , 1.23825 , 0.9733  ] ,
# [1.01464 , 0.06864 , 1.42875 , 0.9733  ] ,
# [1.01464 , 0.06864 , 1.61925 , 0.9733  ] ,
# [1.01464 , 0.06864 , 1.80975 , 0.9733  ] ,
# [1.01464 , 0.06864 , 2.00025 , 0.9733  ] ,
# [1.01464 , 0.06864 , 2.19075 , 0.9733  ] ,
# [1.01464 , 0.06864 , 2.38125 , 0.9733  ] ,
# [1.01464 , 0.06864 , 2.57175 , 0.9733  ] ,
# [1.01464 , 0.06864 , 2.76225 , 0.9733  ] ,
# [1.01464 , 0.06864 , 2.90512 , 0.9733  ] ,
# [1.01464 , 0.06864 , 3.00038 , 0.9733  ] ,
# [1.01464 , 0.06864 , 3.048   , 0.9733  ] ,
# [1.00834 , 0.13873 , 0.0     , 0.94928 ] ,
# [1.00834 , 0.13873 , 0.04763 , 0.94928 ] ,
# [1.00834 , 0.13873 , 0.14288 , 0.94928 ] ,
# [1.00834 , 0.13873 , 0.28575 , 0.94928 ] ,
# [1.00834 , 0.13873 , 0.47625 , 0.94928 ] ,
# [1.00834 , 0.13873 , 0.66675 , 0.94928 ] ,
# [1.00834 , 0.13873 , 0.85725 , 0.94928 ] ,
# [1.00834 , 0.13873 , 1.04775 , 0.94928 ] ,
# [1.00834 , 0.13873 , 1.23825 , 0.94928 ] ,
# [1.00834 , 0.13873 , 1.42875 , 0.94928 ] ,
# [1.00834 , 0.13873 , 1.61925 , 0.94928 ] ,
# [1.00834 , 0.13873 , 1.80975 , 0.94928 ] ,
# [1.00834 , 0.13873 , 2.00025 , 0.94928 ] ,
# [1.00834 , 0.13873 , 2.19075 , 0.94928 ] ,
# [1.00834 , 0.13873 , 2.38125 , 0.94928 ] ,
# [1.00834 , 0.13873 , 2.57175 , 0.94928 ] ,
# [1.00834 , 0.13873 , 2.76225 , 0.94928 ] ,
# [1.00834 , 0.13873 , 2.90513 , 0.94928 ] ,
# [1.00834 , 0.13873 , 3.00038 , 0.94928 ] ,
# [1.00834 , 0.13873 , 3.048   , 0.94928 ] ,
# [0.99089 , 0.23314 , 0.0     , 0.92182 ] ,
# [0.99089 , 0.23314 , 0.04763 , 0.92182 ] ,
# [0.99089 , 0.23314 , 0.14288 , 0.92182 ] ,
# [0.99089 , 0.23314 , 0.28575 , 0.92182 ] ,
# [0.99089 , 0.23314 , 0.47625 , 0.92182 ] ,
# [0.99089 , 0.23314 , 0.66675 , 0.92182 ] ,
# [0.99089 , 0.23314 , 0.85725 , 0.92182 ] ,
# [0.99089 , 0.23314 , 1.04775 , 0.92182 ] ,
# [0.99089 , 0.23314 , 1.23825 , 0.92182 ] ,
# [0.99089 , 0.23314 , 1.42875 , 0.92182 ] ,
# [0.99089 , 0.23314 , 1.61925 , 0.92182 ] ,
# [0.99089 , 0.23314 , 1.80975 , 0.92182 ] ,
# [0.99089 , 0.23314 , 2.00025 , 0.92182 ] ,
# [0.99089 , 0.23314 , 2.19075 , 0.92182 ] ,
# [0.99089 , 0.23314 , 2.38125 , 0.92182 ] ,
# [0.99089 , 0.23314 , 2.57175 , 0.92182 ] ,
# [0.99089 , 0.23314 , 2.76225 , 0.92182 ] ,
# [0.99089 , 0.23314 , 2.90512 , 0.92182 ] ,
# [0.99089 , 0.23314 , 3.00038 , 0.92182 ] ,
# [0.99089 , 0.23314 , 3.048   , 0.92182 ] ,
# [0.96376 , 0.32801 , 0.0     , 0.89894 ] ,
# [0.96376 , 0.32801 , 0.04763 , 0.89894 ] ,
# [0.96376 , 0.32801 , 0.14288 , 0.89894 ] ,
# [0.96376 , 0.32801 , 0.28575 , 0.89894 ] ,
# [0.96376 , 0.32801 , 0.47625 , 0.89894 ] ,
# [0.96376 , 0.32801 , 0.66675 , 0.89894 ] ,
# [0.96376 , 0.32801 , 0.85725 , 0.89894 ] ,
# [0.96376 , 0.32801 , 1.04775 , 0.89894 ] ,
# [0.96376 , 0.32801 , 1.23825 , 0.89894 ] ,
# [0.96376 , 0.32801 , 1.42875 , 0.89894 ] ,
# [0.96376 , 0.32801 , 1.61925 , 0.89894 ] ,
# [0.96376 , 0.32801 , 1.80975 , 0.89894 ] ,
# [0.96376 , 0.32801 , 2.00025 , 0.89894 ] ,
# [0.96376 , 0.32801 , 2.19075 , 0.89894 ] ,
# [0.96376 , 0.32801 , 2.38125 , 0.89894 ] ,
# [0.96376 , 0.32801 , 2.57175 , 0.89894 ] ,
# [0.96376 , 0.32801 , 2.76225 , 0.89894 ] ,
# [0.96376 , 0.32801 , 2.90512 , 0.89894 ] ,
# [0.96376 , 0.32801 , 3.00037 , 0.89894 ] ,
# [0.96376 , 0.32801 , 3.048   , 0.89894 ] ,
# [0.92662 , 0.42187 , 0.0     , 0.88063 ] ,
# [0.92662 , 0.42187 , 0.04762 , 0.88063 ] ,
# [0.92662 , 0.42187 , 0.14287 , 0.88063 ] ,
# [0.92662 , 0.42187 , 0.28575 , 0.88063 ] ,
# [0.92662 , 0.42187 , 0.47625 , 0.88063 ] ,
# [0.92662 , 0.42187 , 0.66675 , 0.88063 ] ,
# [0.92662 , 0.42187 , 0.85725 , 0.88063 ] ,
# [0.92662 , 0.42187 , 1.04775 , 0.88063 ] ,
# [0.92662 , 0.42187 , 1.23825 , 0.88063 ] ,
# [0.92662 , 0.42187 , 1.42875 , 0.88063 ] ,
# [0.92662 , 0.42187 , 1.61925 , 0.88063 ] ,
# [0.92662 , 0.42187 , 1.80975 , 0.88063 ] ,
# [0.92662 , 0.42187 , 2.00025 , 0.88063 ] ,
# [0.92662 , 0.42187 , 2.19075 , 0.88063 ] ,
# [0.92662 , 0.42187 , 2.38125 , 0.88063 ] ,
# [0.92662 , 0.42187 , 2.57175 , 0.88063 ] ,
# [0.92662 , 0.42187 , 2.76225 , 0.88063 ] ,
# [0.92662 , 0.42187 , 2.90512 , 0.88063 ] ,
# [0.92662 , 0.42187 , 3.00037 , 0.88063 ] ,
# [0.92662 , 0.42187 , 3.048   , 0.88063 ] ,
# [0.87942 , 0.51317 , 0.0     , 0.8669  ] ,
# [0.87942 , 0.51317 , 0.04762 , 0.8669  ] ,
# [0.87942 , 0.51317 , 0.14288 , 0.8669  ] ,
# [0.87942 , 0.51317 , 0.28575 , 0.8669  ] ,
# [0.87942 , 0.51317 , 0.47625 , 0.8669  ] ,
# [0.87942 , 0.51317 , 0.66675 , 0.8669  ] ,
# [0.87942 , 0.51317 , 0.85725 , 0.8669  ] ,
# [0.87942 , 0.51317 , 1.04775 , 0.8669  ] ,
# [0.87942 , 0.51317 , 1.23825 , 0.8669  ] ,
# [0.87942 , 0.51317 , 1.42875 , 0.8669  ] ,
# [0.87942 , 0.51317 , 1.61925 , 0.8669  ] ,
# [0.87942 , 0.51317 , 1.80975 , 0.8669  ] ,
# [0.87942 , 0.51317 , 2.00025 , 0.8669  ] ,
# [0.87942 , 0.51317 , 2.19075 , 0.8669  ] ,
# [0.87942 , 0.51317 , 2.38125 , 0.8669  ] ,
# [0.87942 , 0.51317 , 2.57175 , 0.8669  ] ,
# [0.87942 , 0.51317 , 2.76225 , 0.8669  ] ,
# [0.87942 , 0.51317 , 2.90512 , 0.8669  ] ,
# [0.87942 , 0.51317 , 3.00037 , 0.8669  ] ,
# [0.87942 , 0.51317 , 3.048   , 0.8669  ] ,
# [0.82244 , 0.60035 , 0.0     , 0.85775 ] ,
# [0.82244 , 0.60035 , 0.04762 , 0.85775 ] ,
# [0.82244 , 0.60035 , 0.14288 , 0.85775 ] ,
# [0.82244 , 0.60035 , 0.28575 , 0.85775 ] ,
# [0.82244 , 0.60035 , 0.47625 , 0.85775 ] ,
# [0.82244 , 0.60035 , 0.66675 , 0.85775 ] ,
# [0.82244 , 0.60035 , 0.85725 , 0.85775 ] ,
# [0.82244 , 0.60035 , 1.04775 , 0.85775 ] ,
# [0.82244 , 0.60035 , 1.23825 , 0.85775 ] ,
# [0.82244 , 0.60035 , 1.42875 , 0.85775 ] ,
# [0.82244 , 0.60035 , 1.61925 , 0.85775 ] ,
# [0.82244 , 0.60035 , 1.80975 , 0.85775 ] ,
# [0.82244 , 0.60035 , 2.00025 , 0.85775 ] ,
# [0.82244 , 0.60035 , 2.19075 , 0.85775 ] ,
# [0.82244 , 0.60035 , 2.38125 , 0.85775 ] ,
# [0.82244 , 0.60035 , 2.57175 , 0.85775 ] ,
# [0.82244 , 0.60035 , 2.76225 , 0.85775 ] ,
# [0.82244 , 0.60035 , 2.90512 , 0.85775 ] ,
# [0.82244 , 0.60035 , 3.00037 , 0.85775 ] ,
# [0.82244 , 0.60035 , 3.048   , 0.85775 ] ,
# [0.75628 , 0.68185 , 0.0     , 0.85317 ] ,
# [0.75628 , 0.68185 , 0.04762 , 0.85317 ] ,
# [0.75628 , 0.68185 , 0.14288 , 0.85317 ] ,
# [0.75628 , 0.68185 , 0.28575 , 0.85317 ] ,
# [0.75628 , 0.68185 , 0.47625 , 0.85317 ] ,
# [0.75628 , 0.68185 , 0.66675 , 0.85317 ] ,
# [0.75628 , 0.68185 , 0.85725 , 0.85317 ] ,
# [0.75628 , 0.68185 , 1.04775 , 0.85317 ] ,
# [0.75628 , 0.68185 , 1.23825 , 0.85317 ] ,
# [0.75628 , 0.68185 , 1.42875 , 0.85317 ] ,
# [0.75628 , 0.68185 , 1.61925 , 0.85317 ] ,
# [0.75628 , 0.68185 , 1.80975 , 0.85317 ] ,
# [0.75628 , 0.68185 , 2.00025 , 0.85317 ] ,
# [0.75628 , 0.68185 , 2.19075 , 0.85317 ] ,
# [0.75628 , 0.68185 , 2.38125 , 0.85317 ] ,
# [0.75628 , 0.68185 , 2.57175 , 0.85317 ] ,
# [0.75628 , 0.68185 , 2.76225 , 0.85317 ] ,
# [0.75628 , 0.68185 , 2.90512 , 0.85317 ] ,
# [0.75628 , 0.68185 , 3.00037 , 0.85317 ] ,
# [0.75628 , 0.68185 , 3.048   , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.0     , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.04762 , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.14287 , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.28575 , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.47625 , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.66675 , 0.85317 ] ,
# [0.68185 , 0.75628 , 0.85725 , 0.85317 ] ,
# [0.68185 , 0.75628 , 1.04775 , 0.85317 ] ,
# [0.68185 , 0.75628 , 1.23825 , 0.85317 ] ,
# [0.68185 , 0.75628 , 1.42875 , 0.85317 ] ,
# [0.68185 , 0.75628 , 1.61925 , 0.85317 ] ,
# [0.68185 , 0.75628 , 1.80975 , 0.85317 ] ,
# [0.68185 , 0.75628 , 2.00025 , 0.85317 ] ,
# [0.68185 , 0.75628 , 2.19075 , 0.85317 ] ,
# [0.68185 , 0.75628 , 2.38125 , 0.85317 ] ,
# [0.68185 , 0.75628 , 2.57175 , 0.85317 ] ,
# [0.68185 , 0.75628 , 2.76225 , 0.85317 ] ,
# [0.68185 , 0.75628 , 2.90512 , 0.85317 ] ,
# [0.68185 , 0.75628 , 3.00037 , 0.85317 ] ,
# [0.68185 , 0.75628 , 3.048   , 0.85317 ] ,
# [0.60035 , 0.82244 , 0.0     , 0.85775 ] ,
# [0.60035 , 0.82244 , 0.04763 , 0.85775 ] ,
# [0.60035 , 0.82244 , 0.14288 , 0.85775 ] ,
# [0.60035 , 0.82244 , 0.28575 , 0.85775 ] ,
# [0.60035 , 0.82244 , 0.47625 , 0.85775 ] ,
# [0.60035 , 0.82244 , 0.66675 , 0.85775 ] ,
# [0.60035 , 0.82244 , 0.85725 , 0.85775 ] ,
# [0.60035 , 0.82244 , 1.04775 , 0.85775 ] ,
# [0.60035 , 0.82244 , 1.23825 , 0.85775 ] ,
# [0.60035 , 0.82244 , 1.42875 , 0.85775 ] ,
# [0.60035 , 0.82244 , 1.61925 , 0.85775 ] ,
# [0.60035 , 0.82244 , 1.80975 , 0.85775 ] ,
# [0.60035 , 0.82244 , 2.00025 , 0.85775 ] ,
# [0.60035 , 0.82244 , 2.19075 , 0.85775 ] ,
# [0.60035 , 0.82244 , 2.38125 , 0.85775 ] ,
# [0.60035 , 0.82244 , 2.57175 , 0.85775 ] ,
# [0.60035 , 0.82244 , 2.76225 , 0.85775 ] ,
# [0.60035 , 0.82244 , 2.90512 , 0.85775 ] ,
# [0.60035 , 0.82244 , 3.00037 , 0.85775 ] ,
# [0.60035 , 0.82244 , 3.048   , 0.85775 ] ,
# [0.51317 , 0.87942 , 0.0     , 0.8669  ] ,
# [0.51317 , 0.87942 , 0.04762 , 0.8669  ] ,
# [0.51317 , 0.87942 , 0.14288 , 0.8669  ] ,
# [0.51317 , 0.87942 , 0.28575 , 0.8669  ] ,
# [0.51317 , 0.87942 , 0.47625 , 0.8669  ] ,
# [0.51317 , 0.87942 , 0.66675 , 0.8669  ] ,
# [0.51317 , 0.87942 , 0.85725 , 0.8669  ] ,
# [0.51317 , 0.87942 , 1.04775 , 0.8669  ] ,
# [0.51317 , 0.87942 , 1.23825 , 0.8669  ] ,
# [0.51317 , 0.87942 , 1.42875 , 0.8669  ] ,
# [0.51317 , 0.87942 , 1.61925 , 0.8669  ] ,
# [0.51317 , 0.87942 , 1.80975 , 0.8669  ] ,
# [0.51317 , 0.87942 , 2.00025 , 0.8669  ] ,
# [0.51317 , 0.87942 , 2.19075 , 0.8669  ] ,
# [0.51317 , 0.87942 , 2.38125 , 0.8669  ] ,
# [0.51317 , 0.87942 , 2.57175 , 0.8669  ] ,
# [0.51317 , 0.87942 , 2.76225 , 0.8669  ] ,
# [0.51317 , 0.87942 , 2.90512 , 0.8669  ] ,
# [0.51317 , 0.87942 , 3.00037 , 0.8669  ] ,
# [0.51317 , 0.87942 , 3.048   , 0.8669  ] ,
# [0.42187 , 0.92662 , 0.0     , 0.88063 ] ,
# [0.42187 , 0.92662 , 0.04763 , 0.88063 ] ,
# [0.42187 , 0.92662 , 0.14288 , 0.88063 ] ,
# [0.42187 , 0.92662 , 0.28575 , 0.88063 ] ,
# [0.42187 , 0.92662 , 0.47625 , 0.88063 ] ,
# [0.42187 , 0.92662 , 0.66675 , 0.88063 ] ,
# [0.42187 , 0.92662 , 0.85725 , 0.88063 ] ,
# [0.42187 , 0.92662 , 1.04775 , 0.88063 ] ,
# [0.42187 , 0.92662 , 1.23825 , 0.88063 ] ,
# [0.42187 , 0.92662 , 1.42875 , 0.88063 ] ,
# [0.42187 , 0.92662 , 1.61925 , 0.88063 ] ,
# [0.42187 , 0.92662 , 1.80975 , 0.88063 ] ,
# [0.42187 , 0.92662 , 2.00025 , 0.88063 ] ,
# [0.42187 , 0.92662 , 2.19075 , 0.88063 ] ,
# [0.42187 , 0.92662 , 2.38125 , 0.88063 ] ,
# [0.42187 , 0.92662 , 2.57175 , 0.88063 ] ,
# [0.42187 , 0.92662 , 2.76225 , 0.88063 ] ,
# [0.42187 , 0.92662 , 2.90512 , 0.88063 ] ,
# [0.42187 , 0.92662 , 3.00037 , 0.88063 ] ,
# [0.42187 , 0.92662 , 3.048   , 0.88063 ] ,
# [0.32801 , 0.96376 , 0.0     , 0.89894 ] ,
# [0.32801 , 0.96376 , 0.04763 , 0.89894 ] ,
# [0.32801 , 0.96376 , 0.14288 , 0.89894 ] ,
# [0.32801 , 0.96376 , 0.28575 , 0.89894 ] ,
# [0.32801 , 0.96376 , 0.47625 , 0.89894 ] ,
# [0.32801 , 0.96376 , 0.66675 , 0.89894 ] ,
# [0.32801 , 0.96376 , 0.85725 , 0.89894 ] ,
# [0.32801 , 0.96376 , 1.04775 , 0.89894 ] ,
# [0.32801 , 0.96376 , 1.23825 , 0.89894 ] ,
# [0.32801 , 0.96376 , 1.42875 , 0.89894 ] ,
# [0.32801 , 0.96376 , 1.61925 , 0.89894 ] ,
# [0.32801 , 0.96376 , 1.80975 , 0.89894 ] ,
# [0.32801 , 0.96376 , 2.00025 , 0.89894 ] ,
# [0.32801 , 0.96376 , 2.19075 , 0.89894 ] ,
# [0.32801 , 0.96376 , 2.38125 , 0.89894 ] ,
# [0.32801 , 0.96376 , 2.57175 , 0.89894 ] ,
# [0.32801 , 0.96376 , 2.76225 , 0.89894 ] ,
# [0.32801 , 0.96376 , 2.90513 , 0.89894 ] ,
# [0.32801 , 0.96376 , 3.00038 , 0.89894 ] ,
# [0.32801 , 0.96376 , 3.048   , 0.89894 ] ,
# [0.23314 , 0.99089 , 0.0     , 0.92182 ] ,
# [0.23314 , 0.99089 , 0.04763 , 0.92182 ] ,
# [0.23314 , 0.99089 , 0.14288 , 0.92182 ] ,
# [0.23314 , 0.99089 , 0.28575 , 0.92182 ] ,
# [0.23314 , 0.99089 , 0.47625 , 0.92182 ] ,
# [0.23314 , 0.99089 , 0.66675 , 0.92182 ] ,
# [0.23314 , 0.99089 , 0.85725 , 0.92182 ] ,
# [0.23314 , 0.99089 , 1.04775 , 0.92182 ] ,
# [0.23314 , 0.99089 , 1.23825 , 0.92182 ] ,
# [0.23314 , 0.99089 , 1.42875 , 0.92182 ] ,
# [0.23314 , 0.99089 , 1.61925 , 0.92182 ] ,
# [0.23314 , 0.99089 , 1.80975 , 0.92182 ] ,
# [0.23314 , 0.99089 , 2.00025 , 0.92182 ] ,
# [0.23314 , 0.99089 , 2.19075 , 0.92182 ] ,
# [0.23314 , 0.99089 , 2.38125 , 0.92182 ] ,
# [0.23314 , 0.99089 , 2.57175 , 0.92182 ] ,
# [0.23314 , 0.99089 , 2.76225 , 0.92182 ] ,
# [0.23314 , 0.99089 , 2.90512 , 0.92182 ] ,
# [0.23314 , 0.99089 , 3.00038 , 0.92182 ] ,
# [0.23314 , 0.99089 , 3.048   , 0.92182 ] ,
# [0.13873 , 1.00834 , 0.0     , 0.94928 ] ,
# [0.13873 , 1.00834 , 0.04763 , 0.94928 ] ,
# [0.13873 , 1.00834 , 0.14288 , 0.94928 ] ,
# [0.13873 , 1.00834 , 0.28575 , 0.94928 ] ,
# [0.13873 , 1.00834 , 0.47625 , 0.94928 ] ,
# [0.13873 , 1.00834 , 0.66675 , 0.94928 ] ,
# [0.13873 , 1.00834 , 0.85725 , 0.94928 ] ,
# [0.13873 , 1.00834 , 1.04775 , 0.94928 ] ,
# [0.13873 , 1.00834 , 1.23825 , 0.94928 ] ,
# [0.13873 , 1.00834 , 1.42875 , 0.94928 ] ,
# [0.13873 , 1.00834 , 1.61925 , 0.94928 ] ,
# [0.13873 , 1.00834 , 1.80975 , 0.94928 ] ,
# [0.13873 , 1.00834 , 2.00025 , 0.94928 ] ,
# [0.13873 , 1.00834 , 2.19075 , 0.94928 ] ,
# [0.13873 , 1.00834 , 2.38125 , 0.94928 ] ,
# [0.13873 , 1.00834 , 2.57175 , 0.94928 ] ,
# [0.13873 , 1.00834 , 2.76225 , 0.94928 ] ,
# [0.13873 , 1.00834 , 2.90512 , 0.94928 ] ,
# [0.13873 , 1.00834 , 3.00038 , 0.94928 ] ,
# [0.13873 , 1.00834 , 3.048   , 0.94928 ] ,
# [0.06864 , 1.01464 , 0.0     , 0.9733  ] ,
# [0.06864 , 1.01464 , 0.04762 , 0.9733  ] ,
# [0.06864 , 1.01464 , 0.14288 , 0.9733  ] ,
# [0.06864 , 1.01464 , 0.28575 , 0.9733  ] ,
# [0.06864 , 1.01464 , 0.47625 , 0.9733  ] ,
# [0.06864 , 1.01464 , 0.66675 , 0.9733  ] ,
# [0.06864 , 1.01464 , 0.85725 , 0.9733  ] ,
# [0.06864 , 1.01464 , 1.04775 , 0.9733  ] ,
# [0.06864 , 1.01464 , 1.23825 , 0.9733  ] ,
# [0.06864 , 1.01464 , 1.42875 , 0.9733  ] ,
# [0.06864 , 1.01464 , 1.61925 , 0.9733  ] ,
# [0.06864 , 1.01464 , 1.80975 , 0.9733  ] ,
# [0.06864 , 1.01464 , 2.00025 , 0.9733  ] ,
# [0.06864 , 1.01464 , 2.19075 , 0.9733  ] ,
# [0.06864 , 1.01464 , 2.38125 , 0.9733  ] ,
# [0.06864 , 1.01464 , 2.57175 , 0.9733  ] ,
# [0.06864 , 1.01464 , 2.76225 , 0.9733  ] ,
# [0.06864 , 1.01464 , 2.90512 , 0.9733  ] ,
# [0.06864 , 1.01464 , 3.00038 , 0.9733  ] ,
# [0.06864 , 1.01464 , 3.048   , 0.9733  ] ,
# [0.02266 , 1.016   , 0.0     , 0.99085 ] ,
# [0.02266 , 1.016   , 0.04763 , 0.99085 ] ,
# [0.02266 , 1.016   , 0.14288 , 0.99085 ] ,
# [0.02266 , 1.016   , 0.28575 , 0.99085 ] ,
# [0.02266 , 1.016   , 0.47625 , 0.99085 ] ,
# [0.02266 , 1.016   , 0.66675 , 0.99085 ] ,
# [0.02266 , 1.016   , 0.85725 , 0.99085 ] ,
# [0.02266 , 1.016   , 1.04775 , 0.99085 ] ,
# [0.02266 , 1.016   , 1.23825 , 0.99085 ] ,
# [0.02266 , 1.016   , 1.42875 , 0.99085 ] ,
# [0.02266 , 1.016   , 1.61925 , 0.99085 ] ,
# [0.02266 , 1.016   , 1.80975 , 0.99085 ] ,
# [0.02266 , 1.016   , 2.00025 , 0.99085 ] ,
# [0.02266 , 1.016   , 2.19075 , 0.99085 ] ,
# [0.02266 , 1.016   , 2.38125 , 0.99085 ] ,
# [0.02266 , 1.016   , 2.57175 , 0.99085 ] ,
# [0.02266 , 1.016   , 2.76225 , 0.99085 ] ,
# [0.02266 , 1.016   , 2.90512 , 0.99085 ] ,
# [0.02266 , 1.016   , 3.00038 , 0.99085 ] ,
# [0.02266 , 1.016   , 3.048   , 0.99085 ] ,
# [0.0     , 1.016   , 0.0     , 1.0     ] ,
# [0.0     , 1.016   , 0.04763 , 1.0     ] ,
# [0.0     , 1.016   , 0.14288 , 1.0     ] ,
# [0.0     , 1.016   , 0.28575 , 1.0     ] ,
# [0.0     , 1.016   , 0.47625 , 1.0     ] ,
# [0.0     , 1.016   , 0.66675 , 1.0     ] ,
# [0.0     , 1.016   , 0.85725 , 1.0     ] ,
# [0.0     , 1.016   , 1.04775 , 1.0     ] ,
# [0.0     , 1.016   , 1.23825 , 1.0     ] ,
# [0.0     , 1.016   , 1.42875 , 1.0     ] ,
# [0.0     , 1.016   , 1.61925 , 1.0     ] ,
# [0.0     , 1.016   , 1.80975 , 1.0     ] ,
# [0.0     , 1.016   , 2.00025 , 1.0     ] ,
# [0.0     , 1.016   , 2.19075 , 1.0     ] ,
# [0.0     , 1.016   , 2.38125 , 1.0     ] ,
# [0.0     , 1.016   , 2.57175 , 1.0     ] ,
# [0.0     , 1.016   , 2.76225 , 1.0     ] ,
# [0.0     , 1.016   , 2.90512 , 1.0     ] ,
# [0.0     , 1.016   , 3.00038 , 1.0     ] ,
# [0.0     , 1.016   , 3.048   , 1.0     ]
# ])

# for point in controlPts: # Just testing because the Sze paper appears to have these measures
#   for i in range(3):
#         point[i] *= 100



patchTag = 1
P = 5
Q = 5

# Create a BSpline surface instance
surf = NURBS.Surface()

# Set surface degrees
surf.degree_u = P
surf.degree_v = Q

# Setting control points for surface
surf.set_ctrlpts(controlPts.tolist(), 12, 12)

# Set knot vectors
surf.knotvector_u = knotvector.generate(surf.degree_u, surf.ctrlpts_size_u)
surf.knotvector_v = knotvector.generate(surf.degree_v, surf.ctrlpts_size_v)


# Visualize surface
surfVisualize(surf, hold=True)


# nDMaterial ElasticIsotropic $nDtag_elastic $elasticidad_probeta
# $poisson_probeta
E1 = 2.0685e7  # Young's modulus N/m^2
E2 = E1
nu = 0.3  # Poisson's ratio
rho = 0.5e2  # kg/m^3


tagNDmat1 = 1
ops.nDMaterial("ElasticIsotropic", tagNDmat1, E1, nu, rho)

tagNDmat2 = 2
ops.nDMaterial("ElasticIsotropic", tagNDmat2, E2, nu, rho)


# nDMaterial PlateFiber $nDtag_platefiber $nDtag_elastic
tagPlaneStress1 = 3
ops.nDMaterial("PlaneStress", tagPlaneStress1, tagNDmat1)

tagPlaneStress2 = 4
ops.nDMaterial("PlaneStress", tagPlaneStress2, tagNDmat2)

deg2rad = pi / 180

# matTags = [3, 4, 3, 4, 3]
# thickness = [10. * mm, 10. * mm, 10. * mm, 10. * mm, 10. * mm]
# θ = [0 * deg2rad, 45 * deg2rad, 90 * deg2rad, -45 * deg2rad, 0 * deg2rad]

matTags = [3]
thickness = [3.0/100]
θ = [0 * deg2rad]

gFact = [0.0, 0.0, 0.0]


Nlayers = len(θ)

controlPts = surf.ctrlpts2d[:]  # Given in v,u
controlPts = np.array(compatibility.flip_ctrlpts2d(controlPts))  # Flipping to u,v

for point in controlPts:
    for i in range(surf.ctrlpts_size_v):
        for k in range(3):
            point[i][k] /= point[i][3]



ops.IGA("Patch", patchTag, surf.degree_u, surf.degree_v, surf.ctrlpts_size_u, surf.ctrlpts_size_v,
        "-type", "KLShell",
        # "-nonLinearGeometry", 0,
        "-planeStressMatTags", *matTags,
        "-gFact", *gFact,
        "-theta", *θ,
        "-thickness", *thickness,
        "-uKnot", *surf.knotvector_u, "-vKnot", *surf.knotvector_v, "-controlPts", *controlPts.flatten())


nPoints = surf.ctrlpts_size_u * surf.ctrlpts_size_v
print("surf.ctrlpts_size_u: ", surf.ctrlpts_size_u)
print("surf.ctrlpts_size_v: ", surf.ctrlpts_size_v)

# hingedNodes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
# nextToHingedNodes = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
# middleNodes=np.arange(144-11,144+1,1)
# nextToMiddleNodes=middleNodes - 12
# fixedNodes = np.arange(1, 144, 12)
# nextToFixedNodes = fixedNodes+1


# fixedNodes = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

nPoints= surf.ctrlpts_size_u*surf.ctrlpts_size_v

fixedNodes = np.arange(1,surf.ctrlpts_size_u+1,1)
nextToFixedNodes = fixedNodes + surf.ctrlpts_size_u

hingedNodes = np.arange(1, nPoints, surf.ctrlpts_size_v)
nextToHingedNodes = hingedNodes + 1
# nextToHingedNodes = []

middleNodes = np.arange(surf.ctrlpts_size_u, nPoints + 1, surf.ctrlpts_size_v)
nextToMiddleNodes = middleNodes - 1
# nextToMiddleNodes = []

print("fixedNodes: ", fixedNodes)
print("nextToFixedNodes: ", nextToFixedNodes)
print("hingedNodes: ", hingedNodes)
print("nextToHingedNodes: ", nextToHingedNodes)
print("middleNodes: ", middleNodes)
print("nextToMiddleNodes: ", nextToMiddleNodes)



for n in ops.getNodeTags():
    if n in fixedNodes or n in nextToFixedNodes:
        ops.fix(n, 1, 1, 1)
    elif n in middleNodes:
        ops.fix(n, 1, 0, 0)
    elif n in hingedNodes:
        ops.fix(n, 0, 1, 0)


for i in range(len(hingedNodes)):
    ops.equalDOF(int(hingedNodes[i]), int(nextToHingedNodes[i]), 2)
    ops.equalDOF(int(middleNodes[i]), int(nextToMiddleNodes[i]), 2)
# # equalDOFnodes_master = np.arange(2 * surf.ctrlpts_size_u + 1, nPoints, surf.ctrlpts_size_u)
# masterNodes = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
# retainedNodes = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24]

# for i in range(len(masterNodes)):
#     masterNode = masterNodes[i]
#     retainedNode = retainedNodes[i]
#     ops.equalDOF(int(masterNode), int(retainedNode), 1, 2, 3)


print("\n\n\nPRINTING DOMAIN-----------------------")
ops.printModel()
print("\n\n\nDONE PRINTING DOMAIN-----------------------")




# ------------------------------
# Start of analysis generation
# ------------------------------

# create TimeSeries
ops.timeSeries("Linear", 1)

# create a plain load pattern
ops.pattern("Plain", 1, 1)


print("Loading nodes")

Pz = 2000.0
ops.load(nPoints, 0, -Pz / 2.0, 0)


print("Finished loading nodes")


print("Starting analysis")

# Create test
# ops.test("NormDispIncr", 1.0e-3, 100, 1) # Apparently faster
# ops.test("NormUnbalance", 1.0e-4, 60, 1)
ops.test("EnergyIncr", 1.0e-3, 100, 1)


# create SOE
ops.system("UmfPack")

# create DOF number
ops.numberer("Plain")

# create constraint handler
ops.constraints("Plain")
# ops.constraints("Penalty",1,1)


# ops.algorithm("Linear")
# ops.algorithm("Newton")
# ops.algorithm("SecantNewton")
ops.algorithm("NewtonLineSearch", 'type', 'RegulaFalsi')
# ops.algorithm("ModifiedNewton")
# ops.algorithm("KrylovNewton")
# ops.algorithm("BFGS")
# ops.algorithm("Broyden")

# create integrator
delta = -0.05
defMax = 1.7
nSteps = abs(int(defMax / delta))
# ops.integrator("LoadControl", 1.0 / nSteps)
ops.integrator("DisplacementControl", nPoints, 2, delta)

# create analysis object
ops.analysis("Static")


# perform the analysis
import matplotlib.pyplot as plt
data = np.zeros((nSteps + 1, 2))

for j in range(nSteps):
    print("=================================")
    print(f"Load step {j}")
    print("=================================")
    result = ops.analyze(1)
    if result != 0:
        break
        exit(-1)
    else:
        # Adding deformation to controlPts
        controlPts = surf.ctrlpts2d[:]
        controlPts = compatibility.flip_ctrlpts2d(controlPts)  # Flipping to u,v

        fDef = 1
        i = 1
        for dim in controlPts:
            for point in dim:
                point[:3] += fDef * np.array(ops.nodeDisp(i)) * point[3]  # Times the weight
                i += 1

        # Setting control points for surface
        controlPts = compatibility.flip_ctrlpts2d(controlPts)
        controlPts = (np.array(controlPts).reshape(
            nPoints, 4))
        surf.set_ctrlpts(controlPts.tolist(), surf.ctrlpts_size_u, surf.ctrlpts_size_v)

        # Visualize surface
        surfVisualize(surf, hold=True)

        controlPts = surf.ctrlpts2d[:]
        controlPts = compatibility.flip_ctrlpts2d(controlPts)  # Flipping to u,v
        i = 1
        for dim in controlPts:
            for point in dim:
                point[:3] -= fDef * np.array(ops.nodeDisp(i)) * point[3]
                i += 1

        # Setting control points for surface
        controlPts = compatibility.flip_ctrlpts2d(controlPts)
        controlPts = (np.array(controlPts).reshape(
            nPoints, 4))
        surf.set_ctrlpts(controlPts.tolist(), surf.ctrlpts_size_u, surf.ctrlpts_size_v)

        data[j + 1, 0] = abs(ops.nodeDisp(nPoints, 2))
        data[j + 1, 1] = ops.getLoadFactor(1)
        # elasticSolution = (data[j + 1, 2] * (La**3)) / (3 * E1 * I)
        # print("ops.getLoadFactor(1)*Pz: ", ops.getLoadFactor(1) * Pz)
        # print("elasticSolution: ", elasticSolution)
        print("data[j+1,0]: ", data[j + 1, 0])
        print("data[j+1,1]: ", data[j + 1, 1])
        print("2*data[j+1,1]: ", 2*data[j + 1, 1])

        # B=ops.printB('-ret')
        # print("B: ", B)

        print("\nNext load step\n")

P= Pz/1000*np.array([0,0.05,0.1,0.125,0.15,0.175,0.20,0.225,0.25,0.275,0.3,0.325,0.35,0.40,0.45,0.5,0.55, 0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1])

wA = 1.0/100*np.array([ 0,5.421,16.1,22.195,27.657,32.7,37.582,42.633,48.537,56.355,66.41,79.81,94.669,113.704,124.751,132.653,138.92,144.185,148.77,152.863,156.584,160.015,163.211,166.2,168.973,171.505])


plt.plot(data[:, 0]/100, 2*data[:, 1], 'or')
plt.plot(wA, P, '-r')
plt.xlabel('Downward deflection at point A x100')
plt.ylabel('Load at point A x1000')
plt.show()

# Visualize surface
# surfVisualize(surf, hold=True)

# print("Done")

# elasticSolution = (Pz * (La**3)) / (3 * E1 * I)

# print("elasticSolution: ", elasticSolution)
# print("data[nSteps,0]: ", data[nSteps, 0])


# print("Finished analysis")
